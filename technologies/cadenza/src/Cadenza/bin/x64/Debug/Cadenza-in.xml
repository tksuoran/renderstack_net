<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cadenza</name>
    </assembly>
    <members>
        <member name="M:Cadenza.Collections.EnumerableCoda.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Gets the min element of <paramref name="source"/>, based on the result of using
            the default comparer on the result of <paramref name="valueFunc"/>.
            </summary>
            <param name="source">The input sequence.</param>
            <param name="valueFunc">Used to produce a value for comparison.</param>
            <returns>The min element of <paramref name="source"/>.</returns>
            <example>
            Given an IEnumerable of Pig, where a Pig has attributes Name and Size:
            var smallestPig = pigs.MaxBy(pig =&gt; pig.Size);
            </example>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> contained no elements.</exception>
        </member>
        <member name="M:Cadenza.Collections.EnumerableCoda.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Gets the min element of <paramref name="source"/>, based on the result of using
            <paramref name="comparer"/> on the result of <paramref name="valueFunc"/>.
            </summary>
            <param name="source">The input sequence.</param>
            <param name="valueFunc">Used to produce a value for comparison.</param>
            <param name="comparer">Used to compare values produced by valueFunc.</param>
            <returns>The min element of <paramref name="source"/>.</returns>
            <example>
            Given an IEnumerable of Pig, where a Pig has attributes Name and Hue:
            var leastPrettyPig = pigs.MaxBy(pig =&gt; pig.Hue, (hue1, hue2) =&gt; HueComparer.Compare(hue1, hue2));
            </example>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> contained no elements.</exception>
        </member>
        <member name="M:Cadenza.Collections.EnumerableCoda.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Gets the max element of <paramref name="source"/>, based on the result of using
            the default comparer on the result of <paramref name="valueFunc"/>.
            </summary>
            <param name="source">The input sequence.</param>
            <param name="valueFunc">Used to produce a value for comparison.</param>
            <returns>The max element of <paramref name="source"/>.</returns>
            <example>
            Given an IEnumerable of Pig, where a Pig has attributes Name and Size:
            var largestPig = pigs.MaxBy(pig =&gt; pig.Size);
            </example>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> contained no elements.</exception>
        </member>
        <member name="M:Cadenza.Collections.EnumerableCoda.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Gets the max element of <paramref name="source"/>, based on the result of using
            <paramref name="comparer"/> on the result of <paramref name="valueFunc"/>.
            </summary>
            <param name="source">The input sequence.</param>
            <param name="valueFunc">Used to produce a value for comparison.</param>
            <param name="comparer">Used to compare values produced by valueFunc.</param>
            <returns>The max element of <paramref name="source"/>.</returns>
            <example>
            Given an IEnumerable of Pig, where a Pig has attributes Name and Hue:
            var prettiestPig = pigs.MaxBy(pig =&gt; pig.Hue, (hue1, hue2) =&gt; HueComparer.Compare(hue1, hue2));
            </example>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> contained no elements.</exception>
        </member>
        <member name="T:Cadenza.Collections.MutableLookup`2">
            <summary>
            A mutable lookup implementing <see cref="T:System.Linq.ILookup`2"/>
            </summary>
            <typeparam name="TKey">The lookup key.</typeparam>
            <typeparam name="TElement">The elements under each <typeparamref name="TKey"/>.</typeparam>
        </member>
        <member name="M:Cadenza.Collections.MutableLookup`2.Add(`0,`1)">
            <summary>
            Adds <paramref name="element"/> under the specified <paramref name="key"/>. <paramref name="key"/> does not need to exist.
            </summary>
            <param name="key">The key to add <paramref name="element"/> under.</param>
            <param name="element">The element to add.</param>
        </member>
        <member name="M:Cadenza.Collections.MutableLookup`2.Remove(`0,`1)">
            <summary>
            Removes <paramref name="element"/> from the <paramref name="key"/>.
            </summary>
            <param name="key">The key that <paramref name="element"/> is located under.</param>
            <param name="element">The element to remove from <paramref name="key"/>. </param>
            <returns><c>true</c> if <paramref name="key"/> and <paramref name="element"/> existed, <c>false</c> if not.</returns>
        </member>
        <member name="M:Cadenza.Collections.MutableLookup`2.Remove(`0)">
            <summary>
            Removes <paramref name="key"/> from the lookup.
            </summary>
            <param name="key">They to remove.</param>
            <returns><c>true</c> if <paramref name="key"/> existed.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Cadenza.Collections.MutableLookup`2.Contains(`0)">
            <summary>
            Gets whether or not there's a grouping for <paramref name="key"/>.
            </summary>
            <param name="key">The key to check for.</param>
            <returns><c>true</c> if <paramref name="key"/> is present.</returns>
        </member>
        <member name="P:Cadenza.Collections.MutableLookup`2.Count">
            <summary>
            Gets the number of groupings.
            </summary>
        </member>
        <member name="P:Cadenza.Collections.MutableLookup`2.Item(`0)">
            <summary>
            Gets the elements for <paramref name="key"/>.
            </summary>
            <param name="key">The key to get the elements for.</param>
            <returns>The elements under <paramref name="key"/>.</returns>
        </member>
        <member name="M:Cadenza.Collections.OrderedDictionary`2.ContainsKey(`0)">
            <summary>
            Gets whether or not <paramref name="key"/> is in the dictionary.
            </summary>
            <param name="key">The key to look for.</param>
            <returns><c>true</c> if the key was found, <c>false</c> if not.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="key"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Cadenza.Collections.OrderedDictionary`2.ContainsValue(`1)">
            <summary>
            Gets whether or not <paramref name="value"/> is in the dictionary.
            </summary>
            <param name="value">The value to look for.</param>
            <returns><c>true</c> if the value was found, <c>false</c> if not.</returns>
        </member>
        <member name="M:Cadenza.Collections.OrderedDictionary`2.IndexOf(`0)">
            <summary>
            Gets the index of <paramref name="key"/>.
            </summary>
            <param name="key">The key to find the index of.</param>
            <returns>-1 if the key was not found, the index otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Cadenza.Collections.OrderedDictionary`2.IndexOf(`0,System.Int32)">
            <summary>
            Gets the index of <paramref name="key"/> starting with <paramref name="startIndex"/>.
            </summary>
            <param name="key">The key to find the index of.</param>
            <param name="startIndex">The index to start the search at.</param>
            <returns>-1 if the key was not found, the index otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> is not within the valid range of indexes.</exception>
        </member>
        <member name="M:Cadenza.Collections.OrderedDictionary`2.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Gets the index of <paramref name="key"/> between the range given by <paramref name="startIndex"/> and <paramref name="count"/>.
            </summary>
            <param name="key">The key to find the index of.</param>
            <param name="startIndex">The index to start the search at.</param>
            <param name="count">How many items to search, including the <paramref name="startIndex"/>.</param>
            <returns>-1 if the key was not found, the index otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> is not within the valid range of indexes.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> and <paramref name="count"/> are not a valid range.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is less than 0.</exception>
        </member>
        <member name="M:Cadenza.Collections.OrderedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Attempts to get the <paramref name="value"/> for the <paramref name="key"/>.
            </summary>
            <param name="key">The key to search for.</param>
            <param name="value">The value, if found.</param>
            <returns><c>true</c> if the key was found, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="key"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Cadenza.Collections.OrderedDictionary`2.Add(`0,`1)">
            <summary>
            Adds the <paramref name="key"/> and <paramref name="value"/> to the dictionary.
            </summary>
            <param name="key">The key to associate with the <paramref name="value"/>.</param>
            <param name="value">The value to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="key"/> already exists in the dictionary.</exception>
        </member>
        <member name="M:Cadenza.Collections.OrderedDictionary`2.Insert(System.Int32,`0,`1)">
            <summary>
            Inserts the <paramref name="key"/> and <paramref name="value"/> at the specified index.
            </summary>
            <param name="index">The index to insert the key and value at.</param>
            <param name="key">The key to assicate with the <paramref name="value"/>.</param>
            <param name="value">The value to insert.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0 or greater than <see cref="P:Cadenza.Collections.OrderedDictionary`2.Count"/></exception>
        </member>
        <member name="M:Cadenza.Collections.OrderedDictionary`2.Remove(`0)">
            <summary>
            Removes the key and associated value from the dictionary if found.
            </summary>
            <param name="key">The key to remove.</param>
            <returns><c>true</c> if the key was found, <c>false</c> if not.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Cadenza.Collections.OrderedDictionary`2.RemoveAt(System.Int32)">
            <summary>
            Removes they key and associated value from the dictionary located at <paramref name="index"/>.
            </summary>
            <param name="index">The index at which to remove an item.</param>
        </member>
        <member name="M:Cadenza.Collections.OrderedDictionary`2.Clear">
            <summary>
            Clears the dictionary.
            </summary>
        </member>
        <member name="P:Cadenza.Collections.OrderedDictionary`2.Comparer">
            <summary>
            Gets the equality comparer being used for <typeparam name="TKey"/>.
            </summary>
        </member>
        <member name="P:Cadenza.Collections.OrderedDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value associated with <paramref name="key"/>.
            </summary>
            <param name="key">The key to get or set the value for.</param>
            <returns>The value associated with the key.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="key"/> was not found attempting to get.</exception>
        </member>
        <member name="P:Cadenza.Collections.OrderedDictionary`2.Item(System.Int32)">
            <summary>
            Gets the value at the specified index.
            </summary>
            <param name="index">The index to get the value at.</param>
            <returns>The value at the specified index.</returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/> is less than 0 or greater than <see cref="P:Cadenza.Collections.OrderedDictionary`2.Count"/>.</exception>
        </member>
        <member name="P:Cadenza.Collections.OrderedDictionary`2.Count">
            <summary>
            Gets the number of items in the dictionary.
            </summary>
        </member>
        <member name="P:Cadenza.Collections.OrderedDictionary`2.Keys">
            <summary>
            Gets a read only collection of keys in the dictionary.
            </summary>
        </member>
        <member name="P:Cadenza.Collections.OrderedDictionary`2.Values">
            <summary>
            Gets a read only collection of values in the dictionary.
            </summary>
        </member>
        <member name="M:Cadenza.Collections.ReadOnlyDictionary`2.Add(`0,`1)">
            <summary>
            Not supported.
            </summary>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:Cadenza.Collections.ReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>
            Gets whether <paramref name="key"/> exists in the dictionary.
            </summary>
            <param name="key">The key to check for.</param>
            <returns><c>true</c> if the key was found, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Cadenza.Collections.ReadOnlyDictionary`2.Remove(`0)">
            <summary>
            Not supported.
            </summary>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:Cadenza.Collections.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Attempts to get the <paramref name="value"/> for <paramref name="key"/>.
            </summary>
            <param name="key">The key to attempt to get <paramref name="value"/> for.</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cadenza.Collections.ReadOnlyDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Not supported.
            </summary>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:Cadenza.Collections.ReadOnlyDictionary`2.Clear">
            <summary>
            Not supported.
            </summary>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:Cadenza.Collections.ReadOnlyDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Gets whether <paramref name="item"/> is in the collection.
            </summary>
            <param name="item">The <c>KeyValuePair</c> to check for.</param>
            <returns><c>true</c> if <paramref name="item"/> exists.</returns>
        </member>
        <member name="M:Cadenza.Collections.ReadOnlyDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the collection to <paramref name="array"/> starting at <paramref name="arrayIndex"/>.
            </summary>
            <param name="array">The array to copy the collection to.</param>
            <param name="arrayIndex">The offset in <paramref name="array"/> to start copying to.</param>
        </member>
        <member name="M:Cadenza.Collections.ReadOnlyDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Not supported.
            </summary>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="P:Cadenza.Collections.ReadOnlyDictionary`2.Keys">
            <summary>
            Gets a collection of this dictionary's keys.
            </summary>
        </member>
        <member name="P:Cadenza.Collections.ReadOnlyDictionary`2.Values">
            <summary>
            Gets a collection of the values in this dictionary.
            </summary>
        </member>
        <member name="P:Cadenza.Collections.ReadOnlyDictionary`2.Item(`0)">
            <summary>
            Gets the value associated with <paramref name="key"/>.
            </summary>
            <param name="key">The key to get the value for.</param>
            <returns>The value of <paramref name="key"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="key"/> is not found.</exception>
        </member>
        <member name="P:Cadenza.Collections.ReadOnlyDictionary`2.Count">
            <summary>
            Gets the size of the collection.
            </summary>
        </member>
        <member name="P:Cadenza.Collections.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
            <summary>
            Gets whether this collection is readonly (always <c>true</c>.)
            </summary>
        </member>
        <member name="T:Cadenza.ActionCoda">
            <summary>
              Provides extension methods on <see cref="T:System.Action{T}"/>
              and related delegates.
            </summary>
            <remarks>
              <para>
               <see cref="T:Cadenza.ActionCoda" /> provides methods methods for:
              </para>
              <list type="bullet">
               <item><term>
                Delegate currying and partial application (<see cref="M:Cadenza.DelegateCoda.Curry" />)
               </term></item>
               <item><term>
                Delegate composition (<see cref="M:Cadenza.DelegateCoda.Compose" />)
               </term></item>
               <item><term>
                Timing generation (<see cref="M:Cadenza.DelegateCoda.Timings" />)
               </term></item>
              </list>
              <para>
               Currying via partial application is a way to easily transform 
               functions which accept N arguments into functions which accept 
               N-1 arguments, by "fixing" arguments with a value.
              </para>
              <code lang="C#">
              // partial application:
              Func&lt;int,int,int,int&gt; function = (int a, int b, int c) => a + b + c;
              Func&lt;int,int,int&gt;     f_3      = function.Curry (3);
              Func&lt;int&gt;             f_321    = function.Curry (3, 2, 1);
              Console.WriteLine (f_3 (2, 1));  // prints (3 + 2 + 1) == "6"
              Console.WriteLine (f_321 ());    // prints (3 + 2 + 1) == "6"</code>
              <para>
               "Traditional" currying converts a delegate that accepts N arguments
               into a delegate which accepts only one argument, but when invoked may 
               return a further delegate (etc.) until the final value is returned.
              </para>
              <code lang="C#">
              // traditional currying:
              Func&lt;int, Func&lt;int, Func&lt;int, int&gt;&gt;&gt; curry = function.Curry ();
              Func&lt;int, Func&lt;int, int&gt;&gt;            fc_1  = curry (1);
              Func&lt;int, int&gt;                       fc_12 = fc_1 (2);
              Console.WriteLine (fc_12 (3));        // prints (3 + 2 + 1) == "6"
              Console.WriteLine (curry (3)(2)(1));  // prints (3 + 2 + 1) == "6"</code>
              <para>
               Composition is a way to easy chain (or pipe) together multiple delegates
               so that the return value of a "composer" delegate is used as the input 
               parameter for the chained delegate:
              </para>
              <code lang="C#">
              Func&lt;int,string> tostring = Lambda.F ((int n) => n.ToString ());
              Func&lt;int, int>    doubler = Lambda.F ((int n) => n * 2);
              Func&lt;int, string>
                   double_then_tostring = tostring.Compose (doubler);
              Console.WriteLine (double_then_tostring (5));
                  // Prints "10";</code>
              <para>
               All possible argument and return delegate permutations are provided
               for the <see cref="T:System.Action{T}"/> and related types.
              </para>
            </remarks>
        </member>
        <member name="M:Cadenza.ActionCoda.Compose``1(System.Action{``0},System.Func{``0})">
            <typeparam name="T">
              The <see cref="T:System.Func{T}" /> return type, and <see cref="T:System.Action{T}" /> argument type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Action" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Action{T}" /> to compose.
            </param>
            <param name="composer">
              The <see cref="T:System.Func{T}" /> to compose with <paramref name="self" />.
            </param>
            <returns>
              Returns a <see cref="T:System.Action" /> which, when invoked, will
              invoke <paramref name="composer"/> and pass the return value of
              <paramref name="composer" /> to <paramref name="self" />.
            </returns>
            <remarks>
              <para>
               Composition is useful for chaining delegates together, so that the
               return value of <paramref name="composer" /> is automatically used as
               the input parameter for <paramref name="self" />.
              </para>
              <code lang="C#">
              Func&lt;int,string> tostring = Lambda.F ((int n) => n.ToString ());
              Func&lt;int, int>    doubler = Lambda.F ((int n) => n * 2);
              Func&lt;int, string>
                   double_then_tostring = tostring.Compose (doubler);
              Console.WriteLine (double_then_tostring (5));
                  // Prints "10";</code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              <para>
                <paramref name="self" /> is <see langword="null" />.
              </para>
              <para>-or-</para>
              <para>
                <paramref name="composer" /> is <see langword="null" />.
              </para>
            </exception>
        </member>
        <member name="M:Cadenza.ActionCoda.Timings(System.Action,System.Int32)">
            <summary>
              Get timing information for delegate invocations.
            </summary>
            <param name="self">
              The <see cref="T:System.Action" /> to generate timings for.
            </param>
            <param name="runs">
              An <see cref="T:System.Int32" /> containing the number of <see cref="T:System.TimeSpan" /> values to return.
            </param>
            <returns>
              An <see cref="T:System.Collections.Generic.IEnumerable{System.TimeSpan}" />
              which will return the timing information for <paramref name="self" />.
            </returns>
            <remarks>
              <para>
               This is equivalent to calling
               <see cref="M:Cadenza.ActionCoda.Timings(System.Action,System.Int32,System.Int32)" />
               with a <paramref name="loopsPerRun" /> value of <c>1</c>,
               e.g. as if by calling <c>self.Timing (runs, 1)</c>.
              </para>
            </remarks>
            <seealso cref="M:Cadenza.ActionCoda.Timings(System.Action,System.Int32,System.Int32)" />
            <exception cref="T:System.ArgumentException">
              <para>
               <paramref name="runs" /> is negative.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.ActionCoda.Timings(System.Action,System.Int32,System.Int32)">
            <summary>
              Get timing information for delegate invocations.
            </summary>
            <param name="self">
              The <see cref="T:System.Action" /> to generate timings for.
            </param>
            <param name="runs">
              An <see cref="T:System.Int32" /> containing the number of <see cref="T:System.TimeSpan" /> values to return.
            </param>
            <param name="loopsPerRun">
              An <see cref="T:System.Int32" /> containing the number of times to invoke <paramref name="self" /> for each <see cref="T:System.TimeSpan" /> value returned.
            </param>
            <returns>
              An <see cref="T:System.Collections.Generic.IEnumerable{System.TimeSpan}" />
              which will return the timing information for <paramref name="self" />.
            </returns>
            <remarks>
              <para>
               Generates <paramref name="runs" /> <see cref="T:System.TimeSpan" />
               instances, in which each <c>TimeSpan</c> instance is the amount of time
               required to execute <paramref name="self" /> for
               <paramref name="loopsPerRun" /> times.
              </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
              <para>
               <paramref name="runs" /> is negative.
              </para>
              <para>-or-</para>
              <para>
               <paramref name="loopsPerRun" /> is negative.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.ActionCoda.Curry``1(System.Action{``0},``0)">
            <typeparam name="T">
              A <see cref="T:System.Action{T}" /> parameter type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Action" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Action{T}" /> to curry.
            </param>
            <param name="value">
              A value of type <typeparamref name="T"/> to fix.
            </param>
            <returns>
              Returns a <see cref="T:System.Action" /> which, when invoked, will
              invoke <paramref name="self"/> along with the provided fixed parameters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.ActionCoda.Curry``1(System.Action{``0},Cadenza.Tuple{``0})">
            <typeparam name="T">
              A <see cref="T:System.Action{T}" /> parameter type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Action" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Action{T}" /> to curry.
            </param>
            <param name="values">
              A value of type <see cref="T:Tuple{T}" /> which contains the values to fix.
            </param>
            <returns>
              Returns a <see cref="T:System.Action" /> which, when invoked, will
              invoke <paramref name="self"/> along with the provided fixed parameters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.ActionCoda.Curry``1(System.Action{``0})">
            <typeparam name="T">
              The first value type.
            </typeparam>
            <param name="self">
              The <see cref="T:System.Action{T}" /> to curry.
            </param>
            <summary>
              Creates a <see cref="T:System.Action{T}" /> for currying.
            </summary>
            <returns>
              A <see cref="T:System.Action{T}" /> which, when invoked, will 
              
              invoke <paramref name="self"/>.
            </returns>
            <remarks>
              <para>
               This is the more "traditional" view of currying, turning a method
               which takes <c>(X * Y)-&gt;Z</c> (i.e. separate arguments) into a
               <c>X -&gt; (Y -&gt; Z)</c> (that is a "chain" of nested Funcs such that
               you provide only one argument to each Func until you provide enough
               arguments to invoke the original method).
              </para>
              <code lang="C#">
              Func&lt;int,int,int,int&gt; function = (int a, int b, int c) =&gt; a + b + c;
              Func&lt;int,Func&lt;int,Func&lt;int, int&gt;&gt;&gt; curry = function.Curry ();
              Assert.AreEqual(6, curry (3)(2)(1));</code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.ActionCoda.Compose``2(System.Action{``1},System.Func{``0,``1})">
            <typeparam name="T2">
              The <see cref="T:System.Func{T1,T2}" /> return type, and <see cref="T:System.Action{T2}" /> argument type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Action{T1}" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Action{T2}" /> to compose.
            </param>
            <param name="composer">
              The <see cref="T:System.Func{T1,T2}" /> to compose with <paramref name="self" />.
            </param>
            <returns>
              Returns a <see cref="T:System.Action{T1}" /> which, when invoked, will
              invoke <paramref name="composer"/> and pass the return value of
              <paramref name="composer" /> to <paramref name="self" />.
            </returns>
            <remarks>
              <para>
               Composition is useful for chaining delegates together, so that the
               return value of <paramref name="composer" /> is automatically used as
               the input parameter for <paramref name="self" />.
              </para>
              <code lang="C#">
              Func&lt;int,string> tostring = Lambda.F ((int n) => n.ToString ());
              Func&lt;int, int>    doubler = Lambda.F ((int n) => n * 2);
              Func&lt;int, string>
                   double_then_tostring = tostring.Compose (doubler);
              Console.WriteLine (double_then_tostring (5));
                  // Prints "10";</code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              <para>
                <paramref name="self" /> is <see langword="null" />.
              </para>
              <para>-or-</para>
              <para>
                <paramref name="composer" /> is <see langword="null" />.
              </para>
            </exception>
        </member>
        <member name="M:Cadenza.ActionCoda.Timings``1(System.Action{``0},``0,System.Int32)">
            <typeparam name="T">
              A <see cref="T:System.Action{T}" /> parameter type.
            </typeparam>
            <summary>
              Get timing information for delegate invocations.
            </summary>
            <param name="self">
              The <see cref="T:System.Action{T}" /> to generate timings for.
            </param>
            <param name="value">
              The *unknown* <paramref name="self"/> parameter value.
            </param>
            <param name="runs">
              An <see cref="T:System.Int32" /> containing the number of <see cref="T:System.TimeSpan" /> values to return.
            </param>
            <returns>
              An <see cref="T:System.Collections.Generic.IEnumerable{System.TimeSpan}" />
              which will return the timing information for <paramref name="self" />.
            </returns>
            <remarks>
              <para>
               This is equivalent to calling
               <see cref="M:Cadenza.ActionCoda.Timings``1(System.Action{``0},``0,System.Int32,System.Int32)" />
               with a <paramref name="loopsPerRun" /> value of <c>1</c>,
               e.g. as if by calling <c>self.Timing (value, runs, 1)</c>.
              </para>
            </remarks>
            <seealso cref="M:Cadenza.ActionCoda.Timings``1(System.Action{``0},``0,System.Int32,System.Int32)" />
            <exception cref="T:System.ArgumentException">
              <para>
               <paramref name="runs" /> is negative.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.ActionCoda.Timings``1(System.Action{``0},``0,System.Int32,System.Int32)">
            <typeparam name="T">
              A <see cref="T:System.Action{T}" /> parameter type.
            </typeparam>
            <summary>
              Get timing information for delegate invocations.
            </summary>
            <param name="self">
              The <see cref="T:System.Action{T}" /> to generate timings for.
            </param>
            <param name="value">
              The *unknown* <paramref name="self"/> parameter value.
            </param>
            <param name="runs">
              An <see cref="T:System.Int32" /> containing the number of <see cref="T:System.TimeSpan" /> values to return.
            </param>
            <param name="loopsPerRun">
              An <see cref="T:System.Int32" /> containing the number of times to invoke <paramref name="self" /> for each <see cref="T:System.TimeSpan" /> value returned.
            </param>
            <returns>
              An <see cref="T:System.Collections.Generic.IEnumerable{System.TimeSpan}" />
              which will return the timing information for <paramref name="self" />.
            </returns>
            <remarks>
              <para>
               Generates <paramref name="runs" /> <see cref="T:System.TimeSpan" />
               instances, in which each <c>TimeSpan</c> instance is the amount of time
               required to execute <paramref name="self" /> for
               <paramref name="loopsPerRun" /> times.
              </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
              <para>
               <paramref name="runs" /> is negative.
              </para>
              <para>-or-</para>
              <para>
               <paramref name="loopsPerRun" /> is negative.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.ActionCoda.Curry``2(System.Action{``0,``1},``0)">
            <typeparam name="T1">
              A <see cref="T:System.Action{T1,T2}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Action{T1,T2}" /> parameter type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Action{T2}" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Action{T1,T2}" /> to curry.
            </param>
            <param name="value1">
              A value of type <typeparamref name="T1"/> to fix.
            </param>
            <returns>
              Returns a <see cref="T:System.Action{T2}" /> which, when invoked, will
              invoke <paramref name="self"/> along with the provided fixed parameters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.ActionCoda.Curry``2(System.Action{``0,``1},``0,``1)">
            <typeparam name="T1">
              A <see cref="T:System.Action{T1,T2}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Action{T1,T2}" /> parameter type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Action" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Action{T1,T2}" /> to curry.
            </param>
            <param name="value1">
              A value of type <typeparamref name="T1"/> to fix.
            </param>
            <param name="value2">
              A value of type <typeparamref name="T2"/> to fix.
            </param>
            <returns>
              Returns a <see cref="T:System.Action" /> which, when invoked, will
              invoke <paramref name="self"/> along with the provided fixed parameters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.ActionCoda.Curry``2(System.Action{``0,``1},Cadenza.Tuple{``0})">
            <typeparam name="T1">
              A <see cref="T:System.Action{T1,T2}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Action{T1,T2}" /> parameter type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Action{T2}" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Action{T1,T2}" /> to curry.
            </param>
            <param name="values">
              A value of type <see cref="T:Tuple{T1}" /> which contains the values to fix.
            </param>
            <returns>
              Returns a <see cref="T:System.Action{T2}" /> which, when invoked, will
              invoke <paramref name="self"/> along with the provided fixed parameters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.ActionCoda.Curry``2(System.Action{``0,``1},Cadenza.Tuple{``0,``1})">
            <typeparam name="T1">
              A <see cref="T:System.Action{T1,T2}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Action{T1,T2}" /> parameter type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Action" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Action{T1,T2}" /> to curry.
            </param>
            <param name="values">
              A value of type <see cref="T:Tuple{T1,T2}" /> which contains the values to fix.
            </param>
            <returns>
              Returns a <see cref="T:System.Action" /> which, when invoked, will
              invoke <paramref name="self"/> along with the provided fixed parameters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.ActionCoda.Curry``2(System.Action{``0,``1})">
            <typeparam name="T1">
              The first value type.
            </typeparam>
            <typeparam name="T2">
              The second value type.
            </typeparam>
            <param name="self">
              The <see cref="T:System.Action{T1,T2}" /> to curry.
            </param>
            <summary>
              Creates a <see cref="T:System.Func{T1,System.Action{T2}}" /> for currying.
            </summary>
            <returns>
              A <see cref="T:System.Func{T1,System.Action{T2}}" /> which, when invoked, will 
              return a <see cref="T:System.Action{T2}" /> which, when invoked, will 
              invoke <paramref name="self"/>.
            </returns>
            <remarks>
              <para>
               This is the more "traditional" view of currying, turning a method
               which takes <c>(X * Y)-&gt;Z</c> (i.e. separate arguments) into a
               <c>X -&gt; (Y -&gt; Z)</c> (that is a "chain" of nested Funcs such that
               you provide only one argument to each Func until you provide enough
               arguments to invoke the original method).
              </para>
              <code lang="C#">
              Func&lt;int,int,int,int&gt; function = (int a, int b, int c) =&gt; a + b + c;
              Func&lt;int,Func&lt;int,Func&lt;int, int&gt;&gt;&gt; curry = function.Curry ();
              Assert.AreEqual(6, curry (3)(2)(1));</code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.ActionCoda.Compose``3(System.Action{``2},System.Func{``0,``1,``2})">
            <typeparam name="T1">
              A <see cref="T:System.Func{T1,T2,T3}" /> parameter type.
            </typeparam>
            <typeparam name="T3">
              The <see cref="T:System.Func{T1,T2,T3}" /> return type, and <see cref="T:System.Action{T3}" /> argument type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Action{T1,T2}" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Action{T3}" /> to compose.
            </param>
            <param name="composer">
              The <see cref="T:System.Func{T1,T2,T3}" /> to compose with <paramref name="self" />.
            </param>
            <returns>
              Returns a <see cref="T:System.Action{T1,T2}" /> which, when invoked, will
              invoke <paramref name="composer"/> and pass the return value of
              <paramref name="composer" /> to <paramref name="self" />.
            </returns>
            <remarks>
              <para>
               Composition is useful for chaining delegates together, so that the
               return value of <paramref name="composer" /> is automatically used as
               the input parameter for <paramref name="self" />.
              </para>
              <code lang="C#">
              Func&lt;int,string> tostring = Lambda.F ((int n) => n.ToString ());
              Func&lt;int, int>    doubler = Lambda.F ((int n) => n * 2);
              Func&lt;int, string>
                   double_then_tostring = tostring.Compose (doubler);
              Console.WriteLine (double_then_tostring (5));
                  // Prints "10";</code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              <para>
                <paramref name="self" /> is <see langword="null" />.
              </para>
              <para>-or-</para>
              <para>
                <paramref name="composer" /> is <see langword="null" />.
              </para>
            </exception>
        </member>
        <member name="M:Cadenza.ActionCoda.Timings``2(System.Action{``0,``1},``0,``1,System.Int32)">
            <typeparam name="T1">
              A <see cref="T:System.Action{T1,T2}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Action{T1,T2}" /> parameter type.
            </typeparam>
            <summary>
              Get timing information for delegate invocations.
            </summary>
            <param name="self">
              The <see cref="T:System.Action{T1,T2}" /> to generate timings for.
            </param>
            <param name="value1">
              The *unknown* <paramref name="self"/> parameter value.
            </param>
            <param name="value2">
              The *unknown* <paramref name="self"/> parameter value.
            </param>
            <param name="runs">
              An <see cref="T:System.Int32" /> containing the number of <see cref="T:System.TimeSpan" /> values to return.
            </param>
            <returns>
              An <see cref="T:System.Collections.Generic.IEnumerable{System.TimeSpan}" />
              which will return the timing information for <paramref name="self" />.
            </returns>
            <remarks>
              <para>
               This is equivalent to calling
               <see cref="M:Cadenza.ActionCoda.Timings``2(System.Action{``0,``1},``0,``1,System.Int32,System.Int32)" />
               with a <paramref name="loopsPerRun" /> value of <c>1</c>,
               e.g. as if by calling <c>self.Timing (value1, value2, runs, 1)</c>.
              </para>
            </remarks>
            <seealso cref="M:Cadenza.ActionCoda.Timings``2(System.Action{``0,``1},``0,``1,System.Int32,System.Int32)" />
            <exception cref="T:System.ArgumentException">
              <para>
               <paramref name="runs" /> is negative.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.ActionCoda.Timings``2(System.Action{``0,``1},``0,``1,System.Int32,System.Int32)">
            <typeparam name="T1">
              A <see cref="T:System.Action{T1,T2}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Action{T1,T2}" /> parameter type.
            </typeparam>
            <summary>
              Get timing information for delegate invocations.
            </summary>
            <param name="self">
              The <see cref="T:System.Action{T1,T2}" /> to generate timings for.
            </param>
            <param name="value1">
              The *unknown* <paramref name="self"/> parameter value.
            </param>
            <param name="value2">
              The *unknown* <paramref name="self"/> parameter value.
            </param>
            <param name="runs">
              An <see cref="T:System.Int32" /> containing the number of <see cref="T:System.TimeSpan" /> values to return.
            </param>
            <param name="loopsPerRun">
              An <see cref="T:System.Int32" /> containing the number of times to invoke <paramref name="self" /> for each <see cref="T:System.TimeSpan" /> value returned.
            </param>
            <returns>
              An <see cref="T:System.Collections.Generic.IEnumerable{System.TimeSpan}" />
              which will return the timing information for <paramref name="self" />.
            </returns>
            <remarks>
              <para>
               Generates <paramref name="runs" /> <see cref="T:System.TimeSpan" />
               instances, in which each <c>TimeSpan</c> instance is the amount of time
               required to execute <paramref name="self" /> for
               <paramref name="loopsPerRun" /> times.
              </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
              <para>
               <paramref name="runs" /> is negative.
              </para>
              <para>-or-</para>
              <para>
               <paramref name="loopsPerRun" /> is negative.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.ActionCoda.Curry``3(System.Action{``0,``1,``2},``0)">
            <typeparam name="T1">
              A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
            <typeparam name="T3">
              A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Action{T2,T3}" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Action{T1,T2,T3}" /> to curry.
            </param>
            <param name="value1">
              A value of type <typeparamref name="T1"/> to fix.
            </param>
            <returns>
              Returns a <see cref="T:System.Action{T2,T3}" /> which, when invoked, will
              invoke <paramref name="self"/> along with the provided fixed parameters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.ActionCoda.Curry``3(System.Action{``0,``1,``2},``0,``1)">
            <typeparam name="T1">
              A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
            <typeparam name="T3">
              A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Action{T3}" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Action{T1,T2,T3}" /> to curry.
            </param>
            <param name="value1">
              A value of type <typeparamref name="T1"/> to fix.
            </param>
            <param name="value2">
              A value of type <typeparamref name="T2"/> to fix.
            </param>
            <returns>
              Returns a <see cref="T:System.Action{T3}" /> which, when invoked, will
              invoke <paramref name="self"/> along with the provided fixed parameters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.ActionCoda.Curry``3(System.Action{``0,``1,``2},``0,``1,``2)">
            <typeparam name="T1">
              A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
            <typeparam name="T3">
              A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Action" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Action{T1,T2,T3}" /> to curry.
            </param>
            <param name="value1">
              A value of type <typeparamref name="T1"/> to fix.
            </param>
            <param name="value2">
              A value of type <typeparamref name="T2"/> to fix.
            </param>
            <param name="value3">
              A value of type <typeparamref name="T3"/> to fix.
            </param>
            <returns>
              Returns a <see cref="T:System.Action" /> which, when invoked, will
              invoke <paramref name="self"/> along with the provided fixed parameters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.ActionCoda.Curry``3(System.Action{``0,``1,``2},Cadenza.Tuple{``0})">
            <typeparam name="T1">
              A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
            <typeparam name="T3">
              A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Action{T2,T3}" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Action{T1,T2,T3}" /> to curry.
            </param>
            <param name="values">
              A value of type <see cref="T:Tuple{T1}" /> which contains the values to fix.
            </param>
            <returns>
              Returns a <see cref="T:System.Action{T2,T3}" /> which, when invoked, will
              invoke <paramref name="self"/> along with the provided fixed parameters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.ActionCoda.Curry``3(System.Action{``0,``1,``2},Cadenza.Tuple{``0,``1})">
            <typeparam name="T1">
              A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
            <typeparam name="T3">
              A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Action{T3}" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Action{T1,T2,T3}" /> to curry.
            </param>
            <param name="values">
              A value of type <see cref="T:Tuple{T1,T2}" /> which contains the values to fix.
            </param>
            <returns>
              Returns a <see cref="T:System.Action{T3}" /> which, when invoked, will
              invoke <paramref name="self"/> along with the provided fixed parameters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.ActionCoda.Curry``3(System.Action{``0,``1,``2},Cadenza.Tuple{``0,``1,``2})">
            <typeparam name="T1">
              A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
            <typeparam name="T3">
              A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Action" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Action{T1,T2,T3}" /> to curry.
            </param>
            <param name="values">
              A value of type <see cref="T:Tuple{T1,T2,T3}" /> which contains the values to fix.
            </param>
            <returns>
              Returns a <see cref="T:System.Action" /> which, when invoked, will
              invoke <paramref name="self"/> along with the provided fixed parameters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.ActionCoda.Curry``3(System.Action{``0,``1,``2})">
            <typeparam name="T1">
              The first value type.
            </typeparam>
            <typeparam name="T2">
              The second value type.
            </typeparam>
            <typeparam name="T3">
              The third value type.
            </typeparam>
            <param name="self">
              The <see cref="T:System.Action{T1,T2,T3}" /> to curry.
            </param>
            <summary>
              Creates a <see cref="T:System.Func{T1,System.Func{T2,System.Action{T3}}}" /> for currying.
            </summary>
            <returns>
              A <see cref="T:System.Func{T1,System.Func{T2,System.Action{T3}}}" /> which, when invoked, will 
              return a <see cref="T:System.Func{T2,System.Action{T3}}" /> which, when invoked, will return a <see cref="T:System.Action{T3}" /> which, when invoked, will 
              invoke <paramref name="self"/>.
            </returns>
            <remarks>
              <para>
               This is the more "traditional" view of currying, turning a method
               which takes <c>(X * Y)-&gt;Z</c> (i.e. separate arguments) into a
               <c>X -&gt; (Y -&gt; Z)</c> (that is a "chain" of nested Funcs such that
               you provide only one argument to each Func until you provide enough
               arguments to invoke the original method).
              </para>
              <code lang="C#">
              Func&lt;int,int,int,int&gt; function = (int a, int b, int c) =&gt; a + b + c;
              Func&lt;int,Func&lt;int,Func&lt;int, int&gt;&gt;&gt; curry = function.Curry ();
              Assert.AreEqual(6, curry (3)(2)(1));</code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.ActionCoda.Compose``4(System.Action{``3},System.Func{``0,``1,``2,``3})">
            <typeparam name="T1">
              A <see cref="T:System.Func{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Func{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <typeparam name="T4">
              The <see cref="T:System.Func{T1,T2,T3,T4}" /> return type, and <see cref="T:System.Action{T4}" /> argument type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Action{T1,T2,T3}" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Action{T4}" /> to compose.
            </param>
            <param name="composer">
              The <see cref="T:System.Func{T1,T2,T3,T4}" /> to compose with <paramref name="self" />.
            </param>
            <returns>
              Returns a <see cref="T:System.Action{T1,T2,T3}" /> which, when invoked, will
              invoke <paramref name="composer"/> and pass the return value of
              <paramref name="composer" /> to <paramref name="self" />.
            </returns>
            <remarks>
              <para>
               Composition is useful for chaining delegates together, so that the
               return value of <paramref name="composer" /> is automatically used as
               the input parameter for <paramref name="self" />.
              </para>
              <code lang="C#">
              Func&lt;int,string> tostring = Lambda.F ((int n) => n.ToString ());
              Func&lt;int, int>    doubler = Lambda.F ((int n) => n * 2);
              Func&lt;int, string>
                   double_then_tostring = tostring.Compose (doubler);
              Console.WriteLine (double_then_tostring (5));
                  // Prints "10";</code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              <para>
                <paramref name="self" /> is <see langword="null" />.
              </para>
              <para>-or-</para>
              <para>
                <paramref name="composer" /> is <see langword="null" />.
              </para>
            </exception>
        </member>
        <member name="M:Cadenza.ActionCoda.Timings``3(System.Action{``0,``1,``2},``0,``1,``2,System.Int32)">
            <typeparam name="T1">
              A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
            <typeparam name="T3">
              A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
            <summary>
              Get timing information for delegate invocations.
            </summary>
            <param name="self">
              The <see cref="T:System.Action{T1,T2,T3}" /> to generate timings for.
            </param>
            <param name="value1">
              The *unknown* <paramref name="self"/> parameter value.
            </param>
            <param name="value2">
              The *unknown* <paramref name="self"/> parameter value.
            </param>
            <param name="value3">
              The *unknown* <paramref name="self"/> parameter value.
            </param>
            <param name="runs">
              An <see cref="T:System.Int32" /> containing the number of <see cref="T:System.TimeSpan" /> values to return.
            </param>
            <returns>
              An <see cref="T:System.Collections.Generic.IEnumerable{System.TimeSpan}" />
              which will return the timing information for <paramref name="self" />.
            </returns>
            <remarks>
              <para>
               This is equivalent to calling
               <see cref="M:Cadenza.ActionCoda.Timings``3(System.Action{``0,``1,``2},``0,``1,``2,System.Int32,System.Int32)" />
               with a <paramref name="loopsPerRun" /> value of <c>1</c>,
               e.g. as if by calling <c>self.Timing (value1, value2, value3, runs, 1)</c>.
              </para>
            </remarks>
            <seealso cref="M:Cadenza.ActionCoda.Timings``3(System.Action{``0,``1,``2},``0,``1,``2,System.Int32,System.Int32)" />
            <exception cref="T:System.ArgumentException">
              <para>
               <paramref name="runs" /> is negative.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.ActionCoda.Timings``3(System.Action{``0,``1,``2},``0,``1,``2,System.Int32,System.Int32)">
            <typeparam name="T1">
              A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
            <typeparam name="T3">
              A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
            <summary>
              Get timing information for delegate invocations.
            </summary>
            <param name="self">
              The <see cref="T:System.Action{T1,T2,T3}" /> to generate timings for.
            </param>
            <param name="value1">
              The *unknown* <paramref name="self"/> parameter value.
            </param>
            <param name="value2">
              The *unknown* <paramref name="self"/> parameter value.
            </param>
            <param name="value3">
              The *unknown* <paramref name="self"/> parameter value.
            </param>
            <param name="runs">
              An <see cref="T:System.Int32" /> containing the number of <see cref="T:System.TimeSpan" /> values to return.
            </param>
            <param name="loopsPerRun">
              An <see cref="T:System.Int32" /> containing the number of times to invoke <paramref name="self" /> for each <see cref="T:System.TimeSpan" /> value returned.
            </param>
            <returns>
              An <see cref="T:System.Collections.Generic.IEnumerable{System.TimeSpan}" />
              which will return the timing information for <paramref name="self" />.
            </returns>
            <remarks>
              <para>
               Generates <paramref name="runs" /> <see cref="T:System.TimeSpan" />
               instances, in which each <c>TimeSpan</c> instance is the amount of time
               required to execute <paramref name="self" /> for
               <paramref name="loopsPerRun" /> times.
              </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
              <para>
               <paramref name="runs" /> is negative.
              </para>
              <para>-or-</para>
              <para>
               <paramref name="loopsPerRun" /> is negative.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.ActionCoda.Curry``4(System.Action{``0,``1,``2,``3},``0)">
            <typeparam name="T1">
              A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <typeparam name="T3">
              A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <typeparam name="T4">
              A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Action{T2,T3,T4}" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Action{T1,T2,T3,T4}" /> to curry.
            </param>
            <param name="value1">
              A value of type <typeparamref name="T1"/> to fix.
            </param>
            <returns>
              Returns a <see cref="T:System.Action{T2,T3,T4}" /> which, when invoked, will
              invoke <paramref name="self"/> along with the provided fixed parameters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.ActionCoda.Curry``4(System.Action{``0,``1,``2,``3},``0,``1)">
            <typeparam name="T1">
              A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <typeparam name="T3">
              A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <typeparam name="T4">
              A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Action{T3,T4}" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Action{T1,T2,T3,T4}" /> to curry.
            </param>
            <param name="value1">
              A value of type <typeparamref name="T1"/> to fix.
            </param>
            <param name="value2">
              A value of type <typeparamref name="T2"/> to fix.
            </param>
            <returns>
              Returns a <see cref="T:System.Action{T3,T4}" /> which, when invoked, will
              invoke <paramref name="self"/> along with the provided fixed parameters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.ActionCoda.Curry``4(System.Action{``0,``1,``2,``3},``0,``1,``2)">
            <typeparam name="T1">
              A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <typeparam name="T3">
              A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <typeparam name="T4">
              A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Action{T4}" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Action{T1,T2,T3,T4}" /> to curry.
            </param>
            <param name="value1">
              A value of type <typeparamref name="T1"/> to fix.
            </param>
            <param name="value2">
              A value of type <typeparamref name="T2"/> to fix.
            </param>
            <param name="value3">
              A value of type <typeparamref name="T3"/> to fix.
            </param>
            <returns>
              Returns a <see cref="T:System.Action{T4}" /> which, when invoked, will
              invoke <paramref name="self"/> along with the provided fixed parameters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.ActionCoda.Curry``4(System.Action{``0,``1,``2,``3},``0,``1,``2,``3)">
            <typeparam name="T1">
              A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <typeparam name="T3">
              A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <typeparam name="T4">
              A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Action" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Action{T1,T2,T3,T4}" /> to curry.
            </param>
            <param name="value1">
              A value of type <typeparamref name="T1"/> to fix.
            </param>
            <param name="value2">
              A value of type <typeparamref name="T2"/> to fix.
            </param>
            <param name="value3">
              A value of type <typeparamref name="T3"/> to fix.
            </param>
            <param name="value4">
              A value of type <typeparamref name="T4"/> to fix.
            </param>
            <returns>
              Returns a <see cref="T:System.Action" /> which, when invoked, will
              invoke <paramref name="self"/> along with the provided fixed parameters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.ActionCoda.Curry``4(System.Action{``0,``1,``2,``3},Cadenza.Tuple{``0})">
            <typeparam name="T1">
              A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <typeparam name="T3">
              A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <typeparam name="T4">
              A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Action{T2,T3,T4}" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Action{T1,T2,T3,T4}" /> to curry.
            </param>
            <param name="values">
              A value of type <see cref="T:Tuple{T1}" /> which contains the values to fix.
            </param>
            <returns>
              Returns a <see cref="T:System.Action{T2,T3,T4}" /> which, when invoked, will
              invoke <paramref name="self"/> along with the provided fixed parameters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.ActionCoda.Curry``4(System.Action{``0,``1,``2,``3},Cadenza.Tuple{``0,``1})">
            <typeparam name="T1">
              A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <typeparam name="T3">
              A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <typeparam name="T4">
              A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Action{T3,T4}" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Action{T1,T2,T3,T4}" /> to curry.
            </param>
            <param name="values">
              A value of type <see cref="T:Tuple{T1,T2}" /> which contains the values to fix.
            </param>
            <returns>
              Returns a <see cref="T:System.Action{T3,T4}" /> which, when invoked, will
              invoke <paramref name="self"/> along with the provided fixed parameters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.ActionCoda.Curry``4(System.Action{``0,``1,``2,``3},Cadenza.Tuple{``0,``1,``2})">
            <typeparam name="T1">
              A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <typeparam name="T3">
              A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <typeparam name="T4">
              A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Action{T4}" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Action{T1,T2,T3,T4}" /> to curry.
            </param>
            <param name="values">
              A value of type <see cref="T:Tuple{T1,T2,T3}" /> which contains the values to fix.
            </param>
            <returns>
              Returns a <see cref="T:System.Action{T4}" /> which, when invoked, will
              invoke <paramref name="self"/> along with the provided fixed parameters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.ActionCoda.Curry``4(System.Action{``0,``1,``2,``3},Cadenza.Tuple{``0,``1,``2,``3})">
            <typeparam name="T1">
              A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <typeparam name="T3">
              A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <typeparam name="T4">
              A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Action" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Action{T1,T2,T3,T4}" /> to curry.
            </param>
            <param name="values">
              A value of type <see cref="T:Tuple{T1,T2,T3,T4}" /> which contains the values to fix.
            </param>
            <returns>
              Returns a <see cref="T:System.Action" /> which, when invoked, will
              invoke <paramref name="self"/> along with the provided fixed parameters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.ActionCoda.Curry``4(System.Action{``0,``1,``2,``3})">
            <typeparam name="T1">
              The first value type.
            </typeparam>
            <typeparam name="T2">
              The second value type.
            </typeparam>
            <typeparam name="T3">
              The third value type.
            </typeparam>
            <typeparam name="T4">
              The fourth value type.
            </typeparam>
            <param name="self">
              The <see cref="T:System.Action{T1,T2,T3,T4}" /> to curry.
            </param>
            <summary>
              Creates a <see cref="T:System.Func{T1,System.Func{T2,System.Func{T3,System.Action{T4}}}}" /> for currying.
            </summary>
            <returns>
              A <see cref="T:System.Func{T1,System.Func{T2,System.Func{T3,System.Action{T4}}}}" /> which, when invoked, will 
              return a <see cref="T:System.Func{T2,System.Func{T3,System.Action{T4}}}" /> which, when invoked, will return a <see cref="T:System.Func{T3,System.Action{T4}}" /> which, when invoked, will return a <see cref="T:System.Action{T4}" /> which, when invoked, will 
              invoke <paramref name="self"/>.
            </returns>
            <remarks>
              <para>
               This is the more "traditional" view of currying, turning a method
               which takes <c>(X * Y)-&gt;Z</c> (i.e. separate arguments) into a
               <c>X -&gt; (Y -&gt; Z)</c> (that is a "chain" of nested Funcs such that
               you provide only one argument to each Func until you provide enough
               arguments to invoke the original method).
              </para>
              <code lang="C#">
              Func&lt;int,int,int,int&gt; function = (int a, int b, int c) =&gt; a + b + c;
              Func&lt;int,Func&lt;int,Func&lt;int, int&gt;&gt;&gt; curry = function.Curry ();
              Assert.AreEqual(6, curry (3)(2)(1));</code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.ActionCoda.Compose``5(System.Action{``4},System.Func{``0,``1,``2,``3,``4})">
            <typeparam name="T1">
              A <see cref="T:System.Func{T1,T2,T3,T4,T5}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Func{T1,T2,T3,T4,T5}" /> parameter type.
            </typeparam>
            <typeparam name="T3">
              A <see cref="T:System.Func{T1,T2,T3,T4,T5}" /> parameter type.
            </typeparam>
            <typeparam name="T5">
              The <see cref="T:System.Func{T1,T2,T3,T4,T5}" /> return type, and <see cref="T:System.Action{T5}" /> argument type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Action{T1,T2,T3,T4}" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Action{T5}" /> to compose.
            </param>
            <param name="composer">
              The <see cref="T:System.Func{T1,T2,T3,T4,T5}" /> to compose with <paramref name="self" />.
            </param>
            <returns>
              Returns a <see cref="T:System.Action{T1,T2,T3,T4}" /> which, when invoked, will
              invoke <paramref name="composer"/> and pass the return value of
              <paramref name="composer" /> to <paramref name="self" />.
            </returns>
            <remarks>
              <para>
               Composition is useful for chaining delegates together, so that the
               return value of <paramref name="composer" /> is automatically used as
               the input parameter for <paramref name="self" />.
              </para>
              <code lang="C#">
              Func&lt;int,string> tostring = Lambda.F ((int n) => n.ToString ());
              Func&lt;int, int>    doubler = Lambda.F ((int n) => n * 2);
              Func&lt;int, string>
                   double_then_tostring = tostring.Compose (doubler);
              Console.WriteLine (double_then_tostring (5));
                  // Prints "10";</code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              <para>
                <paramref name="self" /> is <see langword="null" />.
              </para>
              <para>-or-</para>
              <para>
                <paramref name="composer" /> is <see langword="null" />.
              </para>
            </exception>
        </member>
        <member name="M:Cadenza.ActionCoda.Timings``4(System.Action{``0,``1,``2,``3},``0,``1,``2,``3,System.Int32)">
            <typeparam name="T1">
              A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <typeparam name="T3">
              A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <typeparam name="T4">
              A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <summary>
              Get timing information for delegate invocations.
            </summary>
            <param name="self">
              The <see cref="T:System.Action{T1,T2,T3,T4}" /> to generate timings for.
            </param>
            <param name="value1">
              The *unknown* <paramref name="self"/> parameter value.
            </param>
            <param name="value2">
              The *unknown* <paramref name="self"/> parameter value.
            </param>
            <param name="value3">
              The *unknown* <paramref name="self"/> parameter value.
            </param>
            <param name="value4">
              The *unknown* <paramref name="self"/> parameter value.
            </param>
            <param name="runs">
              An <see cref="T:System.Int32" /> containing the number of <see cref="T:System.TimeSpan" /> values to return.
            </param>
            <returns>
              An <see cref="T:System.Collections.Generic.IEnumerable{System.TimeSpan}" />
              which will return the timing information for <paramref name="self" />.
            </returns>
            <remarks>
              <para>
               This is equivalent to calling
               <see cref="M:Cadenza.ActionCoda.Timings``4(System.Action{``0,``1,``2,``3},``0,``1,``2,``3,System.Int32,System.Int32)" />
               with a <paramref name="loopsPerRun" /> value of <c>1</c>,
               e.g. as if by calling <c>self.Timing (value1, value2, value3, value4, runs, 1)</c>.
              </para>
            </remarks>
            <seealso cref="M:Cadenza.ActionCoda.Timings``4(System.Action{``0,``1,``2,``3},``0,``1,``2,``3,System.Int32,System.Int32)" />
            <exception cref="T:System.ArgumentException">
              <para>
               <paramref name="runs" /> is negative.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.ActionCoda.Timings``4(System.Action{``0,``1,``2,``3},``0,``1,``2,``3,System.Int32,System.Int32)">
            <typeparam name="T1">
              A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <typeparam name="T3">
              A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <typeparam name="T4">
              A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <summary>
              Get timing information for delegate invocations.
            </summary>
            <param name="self">
              The <see cref="T:System.Action{T1,T2,T3,T4}" /> to generate timings for.
            </param>
            <param name="value1">
              The *unknown* <paramref name="self"/> parameter value.
            </param>
            <param name="value2">
              The *unknown* <paramref name="self"/> parameter value.
            </param>
            <param name="value3">
              The *unknown* <paramref name="self"/> parameter value.
            </param>
            <param name="value4">
              The *unknown* <paramref name="self"/> parameter value.
            </param>
            <param name="runs">
              An <see cref="T:System.Int32" /> containing the number of <see cref="T:System.TimeSpan" /> values to return.
            </param>
            <param name="loopsPerRun">
              An <see cref="T:System.Int32" /> containing the number of times to invoke <paramref name="self" /> for each <see cref="T:System.TimeSpan" /> value returned.
            </param>
            <returns>
              An <see cref="T:System.Collections.Generic.IEnumerable{System.TimeSpan}" />
              which will return the timing information for <paramref name="self" />.
            </returns>
            <remarks>
              <para>
               Generates <paramref name="runs" /> <see cref="T:System.TimeSpan" />
               instances, in which each <c>TimeSpan</c> instance is the amount of time
               required to execute <paramref name="self" /> for
               <paramref name="loopsPerRun" /> times.
              </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
              <para>
               <paramref name="runs" /> is negative.
              </para>
              <para>-or-</para>
              <para>
               <paramref name="loopsPerRun" /> is negative.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="T:Cadenza.Either`2">
            <typeparam name="T1">
              The first value type.
            </typeparam>
            <typeparam name="T2">
              The second value type.
            </typeparam>
            <summary>
              A union of 2 values.
            </summary>
            <remarks>
              <para>
               An <c>Either</c> is an immutable, strongly typed union of variously 
               typed values with each value lacking an otherwise meaningful name aside 
               from its position, which is not exposed.  It stores only one (non-null) 
               value from a set of types (as determined by the type parameter list).
              </para>
              <para>
               The value held by a <see cref="T:Cadenza.Either{T1,T2}" /> instance
               can be converted into a value by using the 
               <see cref="M:Cadenza.Either{T1,T2}.Fold``1(System.Func{`0,``0},System.Func{`1,``0})" /> method.
               <c>Fold</c> takes a list of delegates to perform the conversion; the
               delegate used to perform the conversion is based upon the internal 
               position of the value stored.
              </para>
              <para>
               <c>Either</c> instances are created through one of the following
               creation methods:
              </para>
              <list type="bullet">
                <item><term><see cref="M:Cadenza.Either{T1,T2}.A(`0)" /></term></item>
                <item><term><see cref="M:Cadenza.Either{T1,T2}.op_Implicit(`0)~Cadenza.Either{`0,`1}" /></term></item>
                <item><term><see cref="M:Cadenza.Either{T1,T2}.B(`1)" /></term></item>
                <item><term><see cref="M:Cadenza.Either{T1,T2}.op_Implicit(`1)~Cadenza.Either{`0,`1}" /></term></item>
              </list>
              <code lang="C#">
              var a = Either&lt;double, string&gt;.A (Math.PI);   // value stored in 1st position
              
              int r = a.Fold (
                      v => (int) v,                                 // 1st position converter
                      v => v.Length);                               // 2nd position converter
              
              Console.WriteLine (r);                        // prints 3
             
              // alternatively...
              Either&lt;double, string&gt; b = "value";           // value stored in 2nd position
              Console.WriteLine (b.Fold (v => v.ToString(), v => v));
                                                            // prints "value"</code>
            </remarks>
        </member>
        <member name="M:Cadenza.Either`2.op_Implicit(`0)~Cadenza.Either{`0,`1}">
            <param name="value">
               A <typeparamref name="T1" /> containing the value to store.
            </param>
            <summary>
               Creates a <see cref="T:Cadenza.Either{T1,T2}" /> instance which
               holds a <typeparamref name="T1" /> value.
            </summary>
            <returns>
               A <see cref="T:Cadenza.Either{T1,T2}" /> instance which
               holds a <typeparamref name="T1" /> value.
            </returns>
            <remarks>
              <para>
                This conversion operator is provided to make
                <see cref="T:Cadenza.Either{T1,T2}" /> instance creation easier:
              </para>
              <code lang="C#">
            Either&lt;int, double&gt; value = 42.0;  // value stored in 2nd position</code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
               if <paramref name="value" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Cadenza.Either{T1,T2}.A(`0)" />
        </member>
        <member name="M:Cadenza.Either`2.op_Implicit(`1)~Cadenza.Either{`0,`1}">
            <param name="value">
               A <typeparamref name="T2" /> containing the value to store.
            </param>
            <summary>
               Creates a <see cref="T:Cadenza.Either{T1,T2}" /> instance which
               holds a <typeparamref name="T2" /> value.
            </summary>
            <returns>
               A <see cref="T:Cadenza.Either{T1,T2}" /> instance which
               holds a <typeparamref name="T2" /> value.
            </returns>
            <remarks>
              <para>
                This conversion operator is provided to make
                <see cref="T:Cadenza.Either{T1,T2}" /> instance creation easier:
              </para>
              <code lang="C#">
            Either&lt;int, double&gt; value = 42.0;  // value stored in 2nd position</code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
               if <paramref name="value" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Cadenza.Either{T1,T2}.B(`1)" />
        </member>
        <member name="M:Cadenza.Either`2.A(`0)">
            <param name="value">
                A <typeparamref name="T1" /> containing the value
                to provide to the first
                <see cref="M:Cadenza.Either{T1,T2}.Fold``1(System.Func{`0,``0},System.Func{`1,``0})" />
                delegate.
            </param>
            <summary>
                Creates a <see cref="T:Cadenza.Either{T1,T2}" /> instance which
                holds a <typeparamref name="T1" /> value.
            </summary>
            <returns>
                A <see cref="T:Cadenza.Either{T1,T2}" /> instance which holds a 
                holds a <typeparamref name="T1" /> value.
            </returns>
            <remarks>
                <para>
                 When
                 <see cref="M:Cadenza.Either{T1,T2}.Fold``1(System.Func{`0,``0},System.Func{`1,``0})" />
                 is invoked,
                 the returned <see cref="T:Cadenza.Either{T1,T2}" /> instance
                 will invoke the first delegate
                 for conversions.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="value"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.Either`2.B(`1)">
            <param name="value">
                A <typeparamref name="T2" /> containing the value
                to provide to the second
                <see cref="M:Cadenza.Either{T1,T2}.Fold``1(System.Func{`0,``0},System.Func{`1,``0})" />
                delegate.
            </param>
            <summary>
                Creates a <see cref="T:Cadenza.Either{T1,T2}" /> instance which
                holds a <typeparamref name="T2" /> value.
            </summary>
            <returns>
                A <see cref="T:Cadenza.Either{T1,T2}" /> instance which holds a 
                holds a <typeparamref name="T2" /> value.
            </returns>
            <remarks>
                <para>
                 When
                 <see cref="M:Cadenza.Either{T1,T2}.Fold``1(System.Func{`0,``0},System.Func{`1,``0})" />
                 is invoked,
                 the returned <see cref="T:Cadenza.Either{T1,T2}" /> instance
                 will invoke the second delegate
                 for conversions.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="value"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.Either`2.Fold``1(System.Func{`0,``0},System.Func{`1,``0})">
            <typeparam name="TResult">
                The type to convert the <see cref="T:Cadenza.Either{T1,T2}" /> to.
            </typeparam>
            <param name="a">
              A <see cref="T:System.Func{T1,TResult}" /> 
              used if the <see cref="T:Cadenza.Either{T1,T2}" /> stores a 
              <typeparamref name="T1" /> value into a 
              <typeparamref name="TResult" /> value.
            </param>
            <param name="b">
              A <see cref="T:System.Func{T2,TResult}" /> 
              used if the <see cref="T:Cadenza.Either{T1,T2}" /> stores a 
              <typeparamref name="T2" /> value into a 
              <typeparamref name="TResult" /> value.
            </param>
            <summary>
                Converts a <see cref="T:Cadenza.Either{T1,T2}" /> into a <typeparamref name="TResult" /> value.
            </summary>
            <returns>
                A <typeparamref name="TResult" /> as generated by one
                of the conversion delegate parameters.
            </returns>
            <remarks>
                <para>
                 Converts a <see cref="T:Cadenza.Either{T1,T2}" /> into a <typeparamref name="TResult" />
                 by invoking one of the provided delegate parameters.
                </para>
                <para>
                 The parameter which is invoked is predicated upon the internal position of
                 the value held.  For example, if the internal value is in the first position 
                 (i.e. <see cref="M:Cadenza.Either{T1,T2}.A(`0)" />
                 was used to create the <see cref="T:Cadenza.Either{T1,T2}" /> instance), then
                 <paramref name="a" /> (the first delegate parameter) will be invoked to
                 convert the <typeparamref name="T1" /> into a 
                 <typeparamref name="TResult" />.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              <para>
                <paramref name="a" /> is <see langword="null" />.
              </para>
              <para>-or-</para>
              <para>
                <paramref name="b" /> is <see langword="null" />.
              </para>
            </exception>
        </member>
        <member name="M:Cadenza.Either`2.Equals(System.Object)">
            <param name="obj">
                A <see cref="T:System.Object"/> to compare this instance against.
            </param>
            <summary>
                Determines whether the current instance and the specified object have the same value.
            </summary>
            <returns>
                <para>
                 <see langword="true"/> if <paramref name="obj"/> is a 
                 <see cref="T:Cadenza.Either{T1,T2}" /> and each member of <paramref name="obj"/>
                 and the current instance have the same value (according to
                 <see cref="M:System.Object.Equals(System.Object)"/>); otherwise
                 <see langword="false"/> is returned.
                </para>
            </returns>
            <remarks>
                <para>
                 This method checks for value equality 
                 (<see cref="M:System.Object.Equals(System.Object)"/>), as defined by each
                 value type.
                </para>
                <para>
                 <block subset="none" type="note">
                  This method overrides <see cref="M:System.Object.Equals(System.Object)"/>.
                 </block>
                </para>
            </remarks>
        </member>
        <member name="M:Cadenza.Either`2.Equals(Cadenza.Either{`0,`1})">
            <param name="obj">
              A <see cref="T:Cadenza.Either{T1,T2}" />to compare this instance against.
            </param>
            <summary>
                Determines whether the current instance and the specified <see cref="T:Cadenza.Either{T1,T2}" /> have the same value.
            </summary>
            <returns>
                <para>
                 <see langword="true"/> if each member of <paramref name="obj"/>
                 and the current instance have the same value (according to
                 <see cref="M:System.Object.Equals(System.Object)"/>); otherwise
                 <see langword="false"/> is returned.
                </para>
            </returns>
            <remarks>
                <para>
                 This method checks for value equality
                 (<see cref="M:System.Object.Equals(System.Object)"/>), as defined by each
                 value type.
                </para>
            </remarks>
        </member>
        <member name="M:Cadenza.Either`2.GetHashCode">
            <summary>
                Generates a hash code for the current instance.
            </summary>
            <returns>
                A <see cref="T:System.Int32"/> containing the hash code for this instance.
            </returns>
            <remarks>
                <para>
                 <block subset="none" type="note">
                  This method overrides <see cref="M:System.Object.GetHashCode"/>.
                 </block>
                </para>
            </remarks>
        </member>
        <member name="T:Cadenza.Either`3">
            <typeparam name="T1">
              The first value type.
            </typeparam>
            <typeparam name="T2">
              The second value type.
            </typeparam>
            <typeparam name="T3">
              The third value type.
            </typeparam>
            <summary>
              A union of 3 values.
            </summary>
            <remarks>
              <para>
               An <c>Either</c> is an immutable, strongly typed union of variously 
               typed values with each value lacking an otherwise meaningful name aside 
               from its position, which is not exposed.  It stores only one (non-null) 
               value from a set of types (as determined by the type parameter list).
              </para>
              <para>
               The value held by a <see cref="T:Cadenza.Either{T1,T2,T3}" /> instance
               can be converted into a value by using the 
               <see cref="M:Cadenza.Either{T1,T2,T3}.Fold``1(System.Func{`0,``0},System.Func{`1,``0},System.Func{`2,``0})" /> method.
               <c>Fold</c> takes a list of delegates to perform the conversion; the
               delegate used to perform the conversion is based upon the internal 
               position of the value stored.
              </para>
              <para>
               <c>Either</c> instances are created through one of the following
               creation methods:
              </para>
              <list type="bullet">
                <item><term><see cref="M:Cadenza.Either{T1,T2,T3}.A(`0)" /></term></item>
                <item><term><see cref="M:Cadenza.Either{T1,T2,T3}.op_Implicit(`0)~Cadenza.Either{`0,`1,`2}" /></term></item>
                <item><term><see cref="M:Cadenza.Either{T1,T2,T3}.B(`1)" /></term></item>
                <item><term><see cref="M:Cadenza.Either{T1,T2,T3}.op_Implicit(`1)~Cadenza.Either{`0,`1,`2}" /></term></item>
                <item><term><see cref="M:Cadenza.Either{T1,T2,T3}.C(`2)" /></term></item>
                <item><term><see cref="M:Cadenza.Either{T1,T2,T3}.op_Implicit(`2)~Cadenza.Either{`0,`1,`2}" /></term></item>
              </list>
              <code lang="C#">
              var a = Either&lt;double, string&gt;.A (Math.PI);   // value stored in 1st position
              
              int r = a.Fold (
                      v => (int) v,                                 // 1st position converter
                      v => v.Length);                               // 2nd position converter
              
              Console.WriteLine (r);                        // prints 3
             
              // alternatively...
              Either&lt;double, string&gt; b = "value";           // value stored in 2nd position
              Console.WriteLine (b.Fold (v => v.ToString(), v => v));
                                                            // prints "value"</code>
            </remarks>
        </member>
        <member name="M:Cadenza.Either`3.op_Implicit(`0)~Cadenza.Either{`0,`1,`2}">
            <param name="value">
               A <typeparamref name="T1" /> containing the value to store.
            </param>
            <summary>
               Creates a <see cref="T:Cadenza.Either{T1,T2,T3}" /> instance which
               holds a <typeparamref name="T1" /> value.
            </summary>
            <returns>
               A <see cref="T:Cadenza.Either{T1,T2,T3}" /> instance which
               holds a <typeparamref name="T1" /> value.
            </returns>
            <remarks>
              <para>
                This conversion operator is provided to make
                <see cref="T:Cadenza.Either{T1,T2,T3}" /> instance creation easier:
              </para>
              <code lang="C#">
            Either&lt;int, double&gt; value = 42.0;  // value stored in 2nd position</code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
               if <paramref name="value" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Cadenza.Either{T1,T2,T3}.A(`0)" />
        </member>
        <member name="M:Cadenza.Either`3.op_Implicit(`1)~Cadenza.Either{`0,`1,`2}">
            <param name="value">
               A <typeparamref name="T2" /> containing the value to store.
            </param>
            <summary>
               Creates a <see cref="T:Cadenza.Either{T1,T2,T3}" /> instance which
               holds a <typeparamref name="T2" /> value.
            </summary>
            <returns>
               A <see cref="T:Cadenza.Either{T1,T2,T3}" /> instance which
               holds a <typeparamref name="T2" /> value.
            </returns>
            <remarks>
              <para>
                This conversion operator is provided to make
                <see cref="T:Cadenza.Either{T1,T2,T3}" /> instance creation easier:
              </para>
              <code lang="C#">
            Either&lt;int, double&gt; value = 42.0;  // value stored in 2nd position</code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
               if <paramref name="value" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Cadenza.Either{T1,T2,T3}.B(`1)" />
        </member>
        <member name="M:Cadenza.Either`3.op_Implicit(`2)~Cadenza.Either{`0,`1,`2}">
            <param name="value">
               A <typeparamref name="T3" /> containing the value to store.
            </param>
            <summary>
               Creates a <see cref="T:Cadenza.Either{T1,T2,T3}" /> instance which
               holds a <typeparamref name="T3" /> value.
            </summary>
            <returns>
               A <see cref="T:Cadenza.Either{T1,T2,T3}" /> instance which
               holds a <typeparamref name="T3" /> value.
            </returns>
            <remarks>
              <para>
                This conversion operator is provided to make
                <see cref="T:Cadenza.Either{T1,T2,T3}" /> instance creation easier:
              </para>
              <code lang="C#">
            Either&lt;int, double&gt; value = 42.0;  // value stored in 2nd position</code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
               if <paramref name="value" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Cadenza.Either{T1,T2,T3}.C(`2)" />
        </member>
        <member name="M:Cadenza.Either`3.A(`0)">
            <param name="value">
                A <typeparamref name="T1" /> containing the value
                to provide to the first
                <see cref="M:Cadenza.Either{T1,T2,T3}.Fold``1(System.Func{`0,``0},System.Func{`1,``0},System.Func{`2,``0})" />
                delegate.
            </param>
            <summary>
                Creates a <see cref="T:Cadenza.Either{T1,T2,T3}" /> instance which
                holds a <typeparamref name="T1" /> value.
            </summary>
            <returns>
                A <see cref="T:Cadenza.Either{T1,T2,T3}" /> instance which holds a 
                holds a <typeparamref name="T1" /> value.
            </returns>
            <remarks>
                <para>
                 When
                 <see cref="M:Cadenza.Either{T1,T2,T3}.Fold``1(System.Func{`0,``0},System.Func{`1,``0},System.Func{`2,``0})" />
                 is invoked,
                 the returned <see cref="T:Cadenza.Either{T1,T2,T3}" /> instance
                 will invoke the first delegate
                 for conversions.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="value"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.Either`3.B(`1)">
            <param name="value">
                A <typeparamref name="T2" /> containing the value
                to provide to the second
                <see cref="M:Cadenza.Either{T1,T2,T3}.Fold``1(System.Func{`0,``0},System.Func{`1,``0},System.Func{`2,``0})" />
                delegate.
            </param>
            <summary>
                Creates a <see cref="T:Cadenza.Either{T1,T2,T3}" /> instance which
                holds a <typeparamref name="T2" /> value.
            </summary>
            <returns>
                A <see cref="T:Cadenza.Either{T1,T2,T3}" /> instance which holds a 
                holds a <typeparamref name="T2" /> value.
            </returns>
            <remarks>
                <para>
                 When
                 <see cref="M:Cadenza.Either{T1,T2,T3}.Fold``1(System.Func{`0,``0},System.Func{`1,``0},System.Func{`2,``0})" />
                 is invoked,
                 the returned <see cref="T:Cadenza.Either{T1,T2,T3}" /> instance
                 will invoke the second delegate
                 for conversions.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="value"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.Either`3.C(`2)">
            <param name="value">
                A <typeparamref name="T3" /> containing the value
                to provide to the third
                <see cref="M:Cadenza.Either{T1,T2,T3}.Fold``1(System.Func{`0,``0},System.Func{`1,``0},System.Func{`2,``0})" />
                delegate.
            </param>
            <summary>
                Creates a <see cref="T:Cadenza.Either{T1,T2,T3}" /> instance which
                holds a <typeparamref name="T3" /> value.
            </summary>
            <returns>
                A <see cref="T:Cadenza.Either{T1,T2,T3}" /> instance which holds a 
                holds a <typeparamref name="T3" /> value.
            </returns>
            <remarks>
                <para>
                 When
                 <see cref="M:Cadenza.Either{T1,T2,T3}.Fold``1(System.Func{`0,``0},System.Func{`1,``0},System.Func{`2,``0})" />
                 is invoked,
                 the returned <see cref="T:Cadenza.Either{T1,T2,T3}" /> instance
                 will invoke the third delegate
                 for conversions.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="value"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.Either`3.Fold``1(System.Func{`0,``0},System.Func{`1,``0},System.Func{`2,``0})">
            <typeparam name="TResult">
                The type to convert the <see cref="T:Cadenza.Either{T1,T2,T3}" /> to.
            </typeparam>
            <param name="a">
              A <see cref="T:System.Func{T1,TResult}" /> 
              used if the <see cref="T:Cadenza.Either{T1,T2,T3}" /> stores a 
              <typeparamref name="T1" /> value into a 
              <typeparamref name="TResult" /> value.
            </param>
            <param name="b">
              A <see cref="T:System.Func{T2,TResult}" /> 
              used if the <see cref="T:Cadenza.Either{T1,T2,T3}" /> stores a 
              <typeparamref name="T2" /> value into a 
              <typeparamref name="TResult" /> value.
            </param>
            <param name="c">
              A <see cref="T:System.Func{T3,TResult}" /> 
              used if the <see cref="T:Cadenza.Either{T1,T2,T3}" /> stores a 
              <typeparamref name="T3" /> value into a 
              <typeparamref name="TResult" /> value.
            </param>
            <summary>
                Converts a <see cref="T:Cadenza.Either{T1,T2,T3}" /> into a <typeparamref name="TResult" /> value.
            </summary>
            <returns>
                A <typeparamref name="TResult" /> as generated by one
                of the conversion delegate parameters.
            </returns>
            <remarks>
                <para>
                 Converts a <see cref="T:Cadenza.Either{T1,T2,T3}" /> into a <typeparamref name="TResult" />
                 by invoking one of the provided delegate parameters.
                </para>
                <para>
                 The parameter which is invoked is predicated upon the internal position of
                 the value held.  For example, if the internal value is in the first position 
                 (i.e. <see cref="M:Cadenza.Either{T1,T2,T3}.A(`0)" />
                 was used to create the <see cref="T:Cadenza.Either{T1,T2,T3}" /> instance), then
                 <paramref name="a" /> (the first delegate parameter) will be invoked to
                 convert the <typeparamref name="T1" /> into a 
                 <typeparamref name="TResult" />.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              <para>
                <paramref name="a" /> is <see langword="null" />.
              </para>
              <para>-or-</para>
              <para>
                <paramref name="b" /> is <see langword="null" />.
              </para>
              <para>-or-</para>
              <para>
                <paramref name="c" /> is <see langword="null" />.
              </para>
            </exception>
        </member>
        <member name="M:Cadenza.Either`3.Equals(System.Object)">
            <param name="obj">
                A <see cref="T:System.Object"/> to compare this instance against.
            </param>
            <summary>
                Determines whether the current instance and the specified object have the same value.
            </summary>
            <returns>
                <para>
                 <see langword="true"/> if <paramref name="obj"/> is a 
                 <see cref="T:Cadenza.Either{T1,T2,T3}" /> and each member of <paramref name="obj"/>
                 and the current instance have the same value (according to
                 <see cref="M:System.Object.Equals(System.Object)"/>); otherwise
                 <see langword="false"/> is returned.
                </para>
            </returns>
            <remarks>
                <para>
                 This method checks for value equality 
                 (<see cref="M:System.Object.Equals(System.Object)"/>), as defined by each
                 value type.
                </para>
                <para>
                 <block subset="none" type="note">
                  This method overrides <see cref="M:System.Object.Equals(System.Object)"/>.
                 </block>
                </para>
            </remarks>
        </member>
        <member name="M:Cadenza.Either`3.Equals(Cadenza.Either{`0,`1,`2})">
            <param name="obj">
              A <see cref="T:Cadenza.Either{T1,T2,T3}" />to compare this instance against.
            </param>
            <summary>
                Determines whether the current instance and the specified <see cref="T:Cadenza.Either{T1,T2,T3}" /> have the same value.
            </summary>
            <returns>
                <para>
                 <see langword="true"/> if each member of <paramref name="obj"/>
                 and the current instance have the same value (according to
                 <see cref="M:System.Object.Equals(System.Object)"/>); otherwise
                 <see langword="false"/> is returned.
                </para>
            </returns>
            <remarks>
                <para>
                 This method checks for value equality
                 (<see cref="M:System.Object.Equals(System.Object)"/>), as defined by each
                 value type.
                </para>
            </remarks>
        </member>
        <member name="M:Cadenza.Either`3.GetHashCode">
            <summary>
                Generates a hash code for the current instance.
            </summary>
            <returns>
                A <see cref="T:System.Int32"/> containing the hash code for this instance.
            </returns>
            <remarks>
                <para>
                 <block subset="none" type="note">
                  This method overrides <see cref="M:System.Object.GetHashCode"/>.
                 </block>
                </para>
            </remarks>
        </member>
        <member name="T:Cadenza.Either`4">
            <typeparam name="T1">
              The first value type.
            </typeparam>
            <typeparam name="T2">
              The second value type.
            </typeparam>
            <typeparam name="T3">
              The third value type.
            </typeparam>
            <typeparam name="T4">
              The fourth value type.
            </typeparam>
            <summary>
              A union of 4 values.
            </summary>
            <remarks>
              <para>
               An <c>Either</c> is an immutable, strongly typed union of variously 
               typed values with each value lacking an otherwise meaningful name aside 
               from its position, which is not exposed.  It stores only one (non-null) 
               value from a set of types (as determined by the type parameter list).
              </para>
              <para>
               The value held by a <see cref="T:Cadenza.Either{T1,T2,T3,T4}" /> instance
               can be converted into a value by using the 
               <see cref="M:Cadenza.Either{T1,T2,T3,T4}.Fold``1(System.Func{`0,``0},System.Func{`1,``0},System.Func{`2,``0},System.Func{`3,``0})" /> method.
               <c>Fold</c> takes a list of delegates to perform the conversion; the
               delegate used to perform the conversion is based upon the internal 
               position of the value stored.
              </para>
              <para>
               <c>Either</c> instances are created through one of the following
               creation methods:
              </para>
              <list type="bullet">
                <item><term><see cref="M:Cadenza.Either{T1,T2,T3,T4}.A(`0)" /></term></item>
                <item><term><see cref="M:Cadenza.Either{T1,T2,T3,T4}.op_Implicit(`0)~Cadenza.Either{`0,`1,`2,`3}" /></term></item>
                <item><term><see cref="M:Cadenza.Either{T1,T2,T3,T4}.B(`1)" /></term></item>
                <item><term><see cref="M:Cadenza.Either{T1,T2,T3,T4}.op_Implicit(`1)~Cadenza.Either{`0,`1,`2,`3}" /></term></item>
                <item><term><see cref="M:Cadenza.Either{T1,T2,T3,T4}.C(`2)" /></term></item>
                <item><term><see cref="M:Cadenza.Either{T1,T2,T3,T4}.op_Implicit(`2)~Cadenza.Either{`0,`1,`2,`3}" /></term></item>
                <item><term><see cref="M:Cadenza.Either{T1,T2,T3,T4}.D(`3)" /></term></item>
                <item><term><see cref="M:Cadenza.Either{T1,T2,T3,T4}.op_Implicit(`3)~Cadenza.Either{`0,`1,`2,`3}" /></term></item>
              </list>
              <code lang="C#">
              var a = Either&lt;double, string&gt;.A (Math.PI);   // value stored in 1st position
              
              int r = a.Fold (
                      v => (int) v,                                 // 1st position converter
                      v => v.Length);                               // 2nd position converter
              
              Console.WriteLine (r);                        // prints 3
             
              // alternatively...
              Either&lt;double, string&gt; b = "value";           // value stored in 2nd position
              Console.WriteLine (b.Fold (v => v.ToString(), v => v));
                                                            // prints "value"</code>
            </remarks>
        </member>
        <member name="M:Cadenza.Either`4.op_Implicit(`0)~Cadenza.Either{`0,`1,`2,`3}">
            <param name="value">
               A <typeparamref name="T1" /> containing the value to store.
            </param>
            <summary>
               Creates a <see cref="T:Cadenza.Either{T1,T2,T3,T4}" /> instance which
               holds a <typeparamref name="T1" /> value.
            </summary>
            <returns>
               A <see cref="T:Cadenza.Either{T1,T2,T3,T4}" /> instance which
               holds a <typeparamref name="T1" /> value.
            </returns>
            <remarks>
              <para>
                This conversion operator is provided to make
                <see cref="T:Cadenza.Either{T1,T2,T3,T4}" /> instance creation easier:
              </para>
              <code lang="C#">
            Either&lt;int, double&gt; value = 42.0;  // value stored in 2nd position</code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
               if <paramref name="value" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Cadenza.Either{T1,T2,T3,T4}.A(`0)" />
        </member>
        <member name="M:Cadenza.Either`4.op_Implicit(`1)~Cadenza.Either{`0,`1,`2,`3}">
            <param name="value">
               A <typeparamref name="T2" /> containing the value to store.
            </param>
            <summary>
               Creates a <see cref="T:Cadenza.Either{T1,T2,T3,T4}" /> instance which
               holds a <typeparamref name="T2" /> value.
            </summary>
            <returns>
               A <see cref="T:Cadenza.Either{T1,T2,T3,T4}" /> instance which
               holds a <typeparamref name="T2" /> value.
            </returns>
            <remarks>
              <para>
                This conversion operator is provided to make
                <see cref="T:Cadenza.Either{T1,T2,T3,T4}" /> instance creation easier:
              </para>
              <code lang="C#">
            Either&lt;int, double&gt; value = 42.0;  // value stored in 2nd position</code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
               if <paramref name="value" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Cadenza.Either{T1,T2,T3,T4}.B(`1)" />
        </member>
        <member name="M:Cadenza.Either`4.op_Implicit(`2)~Cadenza.Either{`0,`1,`2,`3}">
            <param name="value">
               A <typeparamref name="T3" /> containing the value to store.
            </param>
            <summary>
               Creates a <see cref="T:Cadenza.Either{T1,T2,T3,T4}" /> instance which
               holds a <typeparamref name="T3" /> value.
            </summary>
            <returns>
               A <see cref="T:Cadenza.Either{T1,T2,T3,T4}" /> instance which
               holds a <typeparamref name="T3" /> value.
            </returns>
            <remarks>
              <para>
                This conversion operator is provided to make
                <see cref="T:Cadenza.Either{T1,T2,T3,T4}" /> instance creation easier:
              </para>
              <code lang="C#">
            Either&lt;int, double&gt; value = 42.0;  // value stored in 2nd position</code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
               if <paramref name="value" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Cadenza.Either{T1,T2,T3,T4}.C(`2)" />
        </member>
        <member name="M:Cadenza.Either`4.op_Implicit(`3)~Cadenza.Either{`0,`1,`2,`3}">
            <param name="value">
               A <typeparamref name="T4" /> containing the value to store.
            </param>
            <summary>
               Creates a <see cref="T:Cadenza.Either{T1,T2,T3,T4}" /> instance which
               holds a <typeparamref name="T4" /> value.
            </summary>
            <returns>
               A <see cref="T:Cadenza.Either{T1,T2,T3,T4}" /> instance which
               holds a <typeparamref name="T4" /> value.
            </returns>
            <remarks>
              <para>
                This conversion operator is provided to make
                <see cref="T:Cadenza.Either{T1,T2,T3,T4}" /> instance creation easier:
              </para>
              <code lang="C#">
            Either&lt;int, double&gt; value = 42.0;  // value stored in 2nd position</code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
               if <paramref name="value" /> is <see langword="null" />.
            </exception>
            <seealso cref="M:Cadenza.Either{T1,T2,T3,T4}.D(`3)" />
        </member>
        <member name="M:Cadenza.Either`4.A(`0)">
            <param name="value">
                A <typeparamref name="T1" /> containing the value
                to provide to the first
                <see cref="M:Cadenza.Either{T1,T2,T3,T4}.Fold``1(System.Func{`0,``0},System.Func{`1,``0},System.Func{`2,``0},System.Func{`3,``0})" />
                delegate.
            </param>
            <summary>
                Creates a <see cref="T:Cadenza.Either{T1,T2,T3,T4}" /> instance which
                holds a <typeparamref name="T1" /> value.
            </summary>
            <returns>
                A <see cref="T:Cadenza.Either{T1,T2,T3,T4}" /> instance which holds a 
                holds a <typeparamref name="T1" /> value.
            </returns>
            <remarks>
                <para>
                 When
                 <see cref="M:Cadenza.Either{T1,T2,T3,T4}.Fold``1(System.Func{`0,``0},System.Func{`1,``0},System.Func{`2,``0},System.Func{`3,``0})" />
                 is invoked,
                 the returned <see cref="T:Cadenza.Either{T1,T2,T3,T4}" /> instance
                 will invoke the first delegate
                 for conversions.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="value"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.Either`4.B(`1)">
            <param name="value">
                A <typeparamref name="T2" /> containing the value
                to provide to the second
                <see cref="M:Cadenza.Either{T1,T2,T3,T4}.Fold``1(System.Func{`0,``0},System.Func{`1,``0},System.Func{`2,``0},System.Func{`3,``0})" />
                delegate.
            </param>
            <summary>
                Creates a <see cref="T:Cadenza.Either{T1,T2,T3,T4}" /> instance which
                holds a <typeparamref name="T2" /> value.
            </summary>
            <returns>
                A <see cref="T:Cadenza.Either{T1,T2,T3,T4}" /> instance which holds a 
                holds a <typeparamref name="T2" /> value.
            </returns>
            <remarks>
                <para>
                 When
                 <see cref="M:Cadenza.Either{T1,T2,T3,T4}.Fold``1(System.Func{`0,``0},System.Func{`1,``0},System.Func{`2,``0},System.Func{`3,``0})" />
                 is invoked,
                 the returned <see cref="T:Cadenza.Either{T1,T2,T3,T4}" /> instance
                 will invoke the second delegate
                 for conversions.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="value"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.Either`4.C(`2)">
            <param name="value">
                A <typeparamref name="T3" /> containing the value
                to provide to the third
                <see cref="M:Cadenza.Either{T1,T2,T3,T4}.Fold``1(System.Func{`0,``0},System.Func{`1,``0},System.Func{`2,``0},System.Func{`3,``0})" />
                delegate.
            </param>
            <summary>
                Creates a <see cref="T:Cadenza.Either{T1,T2,T3,T4}" /> instance which
                holds a <typeparamref name="T3" /> value.
            </summary>
            <returns>
                A <see cref="T:Cadenza.Either{T1,T2,T3,T4}" /> instance which holds a 
                holds a <typeparamref name="T3" /> value.
            </returns>
            <remarks>
                <para>
                 When
                 <see cref="M:Cadenza.Either{T1,T2,T3,T4}.Fold``1(System.Func{`0,``0},System.Func{`1,``0},System.Func{`2,``0},System.Func{`3,``0})" />
                 is invoked,
                 the returned <see cref="T:Cadenza.Either{T1,T2,T3,T4}" /> instance
                 will invoke the third delegate
                 for conversions.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="value"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.Either`4.D(`3)">
            <param name="value">
                A <typeparamref name="T4" /> containing the value
                to provide to the fourth
                <see cref="M:Cadenza.Either{T1,T2,T3,T4}.Fold``1(System.Func{`0,``0},System.Func{`1,``0},System.Func{`2,``0},System.Func{`3,``0})" />
                delegate.
            </param>
            <summary>
                Creates a <see cref="T:Cadenza.Either{T1,T2,T3,T4}" /> instance which
                holds a <typeparamref name="T4" /> value.
            </summary>
            <returns>
                A <see cref="T:Cadenza.Either{T1,T2,T3,T4}" /> instance which holds a 
                holds a <typeparamref name="T4" /> value.
            </returns>
            <remarks>
                <para>
                 When
                 <see cref="M:Cadenza.Either{T1,T2,T3,T4}.Fold``1(System.Func{`0,``0},System.Func{`1,``0},System.Func{`2,``0},System.Func{`3,``0})" />
                 is invoked,
                 the returned <see cref="T:Cadenza.Either{T1,T2,T3,T4}" /> instance
                 will invoke the fourth delegate
                 for conversions.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="value"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.Either`4.Fold``1(System.Func{`0,``0},System.Func{`1,``0},System.Func{`2,``0},System.Func{`3,``0})">
            <typeparam name="TResult">
                The type to convert the <see cref="T:Cadenza.Either{T1,T2,T3,T4}" /> to.
            </typeparam>
            <param name="a">
              A <see cref="T:System.Func{T1,TResult}" /> 
              used if the <see cref="T:Cadenza.Either{T1,T2,T3,T4}" /> stores a 
              <typeparamref name="T1" /> value into a 
              <typeparamref name="TResult" /> value.
            </param>
            <param name="b">
              A <see cref="T:System.Func{T2,TResult}" /> 
              used if the <see cref="T:Cadenza.Either{T1,T2,T3,T4}" /> stores a 
              <typeparamref name="T2" /> value into a 
              <typeparamref name="TResult" /> value.
            </param>
            <param name="c">
              A <see cref="T:System.Func{T3,TResult}" /> 
              used if the <see cref="T:Cadenza.Either{T1,T2,T3,T4}" /> stores a 
              <typeparamref name="T3" /> value into a 
              <typeparamref name="TResult" /> value.
            </param>
            <param name="d">
              A <see cref="T:System.Func{T4,TResult}" /> 
              used if the <see cref="T:Cadenza.Either{T1,T2,T3,T4}" /> stores a 
              <typeparamref name="T4" /> value into a 
              <typeparamref name="TResult" /> value.
            </param>
            <summary>
                Converts a <see cref="T:Cadenza.Either{T1,T2,T3,T4}" /> into a <typeparamref name="TResult" /> value.
            </summary>
            <returns>
                A <typeparamref name="TResult" /> as generated by one
                of the conversion delegate parameters.
            </returns>
            <remarks>
                <para>
                 Converts a <see cref="T:Cadenza.Either{T1,T2,T3,T4}" /> into a <typeparamref name="TResult" />
                 by invoking one of the provided delegate parameters.
                </para>
                <para>
                 The parameter which is invoked is predicated upon the internal position of
                 the value held.  For example, if the internal value is in the first position 
                 (i.e. <see cref="M:Cadenza.Either{T1,T2,T3,T4}.A(`0)" />
                 was used to create the <see cref="T:Cadenza.Either{T1,T2,T3,T4}" /> instance), then
                 <paramref name="a" /> (the first delegate parameter) will be invoked to
                 convert the <typeparamref name="T1" /> into a 
                 <typeparamref name="TResult" />.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              <para>
                <paramref name="a" /> is <see langword="null" />.
              </para>
              <para>-or-</para>
              <para>
                <paramref name="b" /> is <see langword="null" />.
              </para>
              <para>-or-</para>
              <para>
                <paramref name="c" /> is <see langword="null" />.
              </para>
              <para>-or-</para>
              <para>
                <paramref name="d" /> is <see langword="null" />.
              </para>
            </exception>
        </member>
        <member name="M:Cadenza.Either`4.Equals(System.Object)">
            <param name="obj">
                A <see cref="T:System.Object"/> to compare this instance against.
            </param>
            <summary>
                Determines whether the current instance and the specified object have the same value.
            </summary>
            <returns>
                <para>
                 <see langword="true"/> if <paramref name="obj"/> is a 
                 <see cref="T:Cadenza.Either{T1,T2,T3,T4}" /> and each member of <paramref name="obj"/>
                 and the current instance have the same value (according to
                 <see cref="M:System.Object.Equals(System.Object)"/>); otherwise
                 <see langword="false"/> is returned.
                </para>
            </returns>
            <remarks>
                <para>
                 This method checks for value equality 
                 (<see cref="M:System.Object.Equals(System.Object)"/>), as defined by each
                 value type.
                </para>
                <para>
                 <block subset="none" type="note">
                  This method overrides <see cref="M:System.Object.Equals(System.Object)"/>.
                 </block>
                </para>
            </remarks>
        </member>
        <member name="M:Cadenza.Either`4.Equals(Cadenza.Either{`0,`1,`2,`3})">
            <param name="obj">
              A <see cref="T:Cadenza.Either{T1,T2,T3,T4}" />to compare this instance against.
            </param>
            <summary>
                Determines whether the current instance and the specified <see cref="T:Cadenza.Either{T1,T2,T3,T4}" /> have the same value.
            </summary>
            <returns>
                <para>
                 <see langword="true"/> if each member of <paramref name="obj"/>
                 and the current instance have the same value (according to
                 <see cref="M:System.Object.Equals(System.Object)"/>); otherwise
                 <see langword="false"/> is returned.
                </para>
            </returns>
            <remarks>
                <para>
                 This method checks for value equality
                 (<see cref="M:System.Object.Equals(System.Object)"/>), as defined by each
                 value type.
                </para>
            </remarks>
        </member>
        <member name="M:Cadenza.Either`4.GetHashCode">
            <summary>
                Generates a hash code for the current instance.
            </summary>
            <returns>
                A <see cref="T:System.Int32"/> containing the hash code for this instance.
            </returns>
            <remarks>
                <para>
                 <block subset="none" type="note">
                  This method overrides <see cref="M:System.Object.GetHashCode"/>.
                 </block>
                </para>
            </remarks>
        </member>
        <member name="T:Cadenza.FuncCoda">
            <summary>
              Provides extension methods on <see cref="T:System.Func{TResult}"/>
              and related delegates.
            </summary>
            <remarks>
              <para>
               <see cref="T:Cadenza.FuncCoda" /> provides methods methods for:
              </para>
              <list type="bullet">
               <item><term>
                Delegate currying and partial application (<see cref="M:Cadenza.DelegateCoda.Curry" />)
               </term></item>
               <item><term>
                Delegate composition (<see cref="M:Cadenza.DelegateCoda.Compose" />)
               </term></item>
               <item><term>
                Timing generation (<see cref="M:Cadenza.DelegateCoda.Timings" />)
               </term></item>
              </list>
              <para>
               Currying via partial application is a way to easily transform 
               functions which accept N arguments into functions which accept 
               N-1 arguments, by "fixing" arguments with a value.
              </para>
              <code lang="C#">
              // partial application:
              Func&lt;int,int,int,int&gt; function = (int a, int b, int c) => a + b + c;
              Func&lt;int,int,int&gt;     f_3      = function.Curry (3);
              Func&lt;int&gt;             f_321    = function.Curry (3, 2, 1);
              Console.WriteLine (f_3 (2, 1));  // prints (3 + 2 + 1) == "6"
              Console.WriteLine (f_321 ());    // prints (3 + 2 + 1) == "6"</code>
              <para>
               "Traditional" currying converts a delegate that accepts N arguments
               into a delegate which accepts only one argument, but when invoked may 
               return a further delegate (etc.) until the final value is returned.
              </para>
              <code lang="C#">
              // traditional currying:
              Func&lt;int, Func&lt;int, Func&lt;int, int&gt;&gt;&gt; curry = function.Curry ();
              Func&lt;int, Func&lt;int, int&gt;&gt;            fc_1  = curry (1);
              Func&lt;int, int&gt;                       fc_12 = fc_1 (2);
              Console.WriteLine (fc_12 (3));        // prints (3 + 2 + 1) == "6"
              Console.WriteLine (curry (3)(2)(1));  // prints (3 + 2 + 1) == "6"</code>
              <para>
               Composition is a way to easy chain (or pipe) together multiple delegates
               so that the return value of a "composer" delegate is used as the input 
               parameter for the chained delegate:
              </para>
              <code lang="C#">
              Func&lt;int,string> tostring = Lambda.F ((int n) => n.ToString ());
              Func&lt;int, int>    doubler = Lambda.F ((int n) => n * 2);
              Func&lt;int, string>
                   double_then_tostring = tostring.Compose (doubler);
              Console.WriteLine (double_then_tostring (5));
                  // Prints "10";</code>
              <para>
               All possible argument and return delegate permutations are provided
               for the <see cref="T:System.Func{T,TResult}"/> and related types.
              </para>
            </remarks>
        </member>
        <member name="M:Cadenza.FuncCoda.Compose``2(System.Func{``0,``1},System.Func{``0})">
            <typeparam name="T">
              The <see cref="T:System.Func{T}" /> return type, and <see cref="T:System.Func{T,TResult}" /> argument type.
            </typeparam>
            <typeparam name="TResult">
              The <see cref="T:System.Func{T,TResult}" /> return type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Func{TResult}" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Func{T,TResult}" /> to compose.
            </param>
            <param name="composer">
              The <see cref="T:System.Func{T}" /> to compose with <paramref name="self" />.
            </param>
            <returns>
              Returns a <see cref="T:System.Func{TResult}" /> which, when invoked, will
              invoke <paramref name="composer"/> and pass the return value of
              <paramref name="composer" /> to <paramref name="self" />.
            </returns>
            <remarks>
              <para>
               Composition is useful for chaining delegates together, so that the
               return value of <paramref name="composer" /> is automatically used as
               the input parameter for <paramref name="self" />.
              </para>
              <code lang="C#">
              Func&lt;int,string> tostring = Lambda.F ((int n) => n.ToString ());
              Func&lt;int, int>    doubler = Lambda.F ((int n) => n * 2);
              Func&lt;int, string>
                   double_then_tostring = tostring.Compose (doubler);
              Console.WriteLine (double_then_tostring (5));
                  // Prints "10";</code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              <para>
                <paramref name="self" /> is <see langword="null" />.
              </para>
              <para>-or-</para>
              <para>
                <paramref name="composer" /> is <see langword="null" />.
              </para>
            </exception>
        </member>
        <member name="M:Cadenza.FuncCoda.Curry``2(System.Func{``0,``1},``0)">
            <typeparam name="T">
              A <see cref="T:System.Func{T,TResult}" /> parameter type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Func{TResult}" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Func{T,TResult}" /> to curry.
            </param>
            <param name="value">
              A value of type <typeparamref name="T"/> to fix.
            </param>
            <returns>
              Returns a <see cref="T:System.Func{TResult}" /> which, when invoked, will
              invoke <paramref name="self"/> along with the provided fixed parameters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.FuncCoda.Curry``2(System.Func{``0,``1},Cadenza.Tuple{``0})">
            <typeparam name="T">
              A <see cref="T:System.Func{T,TResult}" /> parameter type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Func{TResult}" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Func{T,TResult}" /> to curry.
            </param>
            <param name="values">
              A value of type <see cref="T:Tuple{T}" /> which contains the values to fix.
            </param>
            <returns>
              Returns a <see cref="T:System.Func{TResult}" /> which, when invoked, will
              invoke <paramref name="self"/> along with the provided fixed parameters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.FuncCoda.Curry``2(System.Func{``0,``1})">
            <typeparam name="T">
              The first value type.
            </typeparam>
            <typeparam name="TResult">
              The return value type.
            </typeparam>
            <param name="self">
              The <see cref="T:System.Func{T,TResult}" /> to curry.
            </param>
            <summary>
              Creates a <see cref="T:System.Func{T,TResult}" /> for currying.
            </summary>
            <returns>
              A <see cref="T:System.Func{T,TResult}" /> which, when invoked, will 
              
              invoke <paramref name="self"/>.
            </returns>
            <remarks>
              <para>
               This is the more "traditional" view of currying, turning a method
               which takes <c>(X * Y)-&gt;Z</c> (i.e. separate arguments) into a
               <c>X -&gt; (Y -&gt; Z)</c> (that is a "chain" of nested Funcs such that
               you provide only one argument to each Func until you provide enough
               arguments to invoke the original method).
              </para>
              <code lang="C#">
              Func&lt;int,int,int,int&gt; function = (int a, int b, int c) =&gt; a + b + c;
              Func&lt;int,Func&lt;int,Func&lt;int, int&gt;&gt;&gt; curry = function.Curry ();
              Assert.AreEqual(6, curry (3)(2)(1));</code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.FuncCoda.Compose``3(System.Func{``1,``2},System.Func{``0,``1})">
            <typeparam name="T2">
              The <see cref="T:System.Func{T1,T2}" /> return type, and <see cref="T:System.Func{T2,TResult}" /> argument type.
            </typeparam>
            <typeparam name="TResult">
              The <see cref="T:System.Func{T2,TResult}" /> return type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Func{T1,TResult}" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Func{T2,TResult}" /> to compose.
            </param>
            <param name="composer">
              The <see cref="T:System.Func{T1,T2}" /> to compose with <paramref name="self" />.
            </param>
            <returns>
              Returns a <see cref="T:System.Func{T1,TResult}" /> which, when invoked, will
              invoke <paramref name="composer"/> and pass the return value of
              <paramref name="composer" /> to <paramref name="self" />.
            </returns>
            <remarks>
              <para>
               Composition is useful for chaining delegates together, so that the
               return value of <paramref name="composer" /> is automatically used as
               the input parameter for <paramref name="self" />.
              </para>
              <code lang="C#">
              Func&lt;int,string> tostring = Lambda.F ((int n) => n.ToString ());
              Func&lt;int, int>    doubler = Lambda.F ((int n) => n * 2);
              Func&lt;int, string>
                   double_then_tostring = tostring.Compose (doubler);
              Console.WriteLine (double_then_tostring (5));
                  // Prints "10";</code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              <para>
                <paramref name="self" /> is <see langword="null" />.
              </para>
              <para>-or-</para>
              <para>
                <paramref name="composer" /> is <see langword="null" />.
              </para>
            </exception>
        </member>
        <member name="M:Cadenza.FuncCoda.Curry``3(System.Func{``0,``1,``2},``0)">
            <typeparam name="T1">
              A <see cref="T:System.Func{T1,T2,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Func{T1,T2,TResult}" /> parameter type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Func{T2,TResult}" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Func{T1,T2,TResult}" /> to curry.
            </param>
            <param name="value1">
              A value of type <typeparamref name="T1"/> to fix.
            </param>
            <returns>
              Returns a <see cref="T:System.Func{T2,TResult}" /> which, when invoked, will
              invoke <paramref name="self"/> along with the provided fixed parameters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.FuncCoda.Curry``3(System.Func{``0,``1,``2},``0,``1)">
            <typeparam name="T1">
              A <see cref="T:System.Func{T1,T2,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Func{T1,T2,TResult}" /> parameter type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Func{TResult}" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Func{T1,T2,TResult}" /> to curry.
            </param>
            <param name="value1">
              A value of type <typeparamref name="T1"/> to fix.
            </param>
            <param name="value2">
              A value of type <typeparamref name="T2"/> to fix.
            </param>
            <returns>
              Returns a <see cref="T:System.Func{TResult}" /> which, when invoked, will
              invoke <paramref name="self"/> along with the provided fixed parameters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.FuncCoda.Curry``3(System.Func{``0,``1,``2},Cadenza.Tuple{``0})">
            <typeparam name="T1">
              A <see cref="T:System.Func{T1,T2,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Func{T1,T2,TResult}" /> parameter type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Func{T2,TResult}" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Func{T1,T2,TResult}" /> to curry.
            </param>
            <param name="values">
              A value of type <see cref="T:Tuple{T1}" /> which contains the values to fix.
            </param>
            <returns>
              Returns a <see cref="T:System.Func{T2,TResult}" /> which, when invoked, will
              invoke <paramref name="self"/> along with the provided fixed parameters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.FuncCoda.Curry``3(System.Func{``0,``1,``2},Cadenza.Tuple{``0,``1})">
            <typeparam name="T1">
              A <see cref="T:System.Func{T1,T2,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Func{T1,T2,TResult}" /> parameter type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Func{TResult}" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Func{T1,T2,TResult}" /> to curry.
            </param>
            <param name="values">
              A value of type <see cref="T:Tuple{T1,T2}" /> which contains the values to fix.
            </param>
            <returns>
              Returns a <see cref="T:System.Func{TResult}" /> which, when invoked, will
              invoke <paramref name="self"/> along with the provided fixed parameters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.FuncCoda.Curry``3(System.Func{``0,``1,``2})">
            <typeparam name="T1">
              The first value type.
            </typeparam>
            <typeparam name="T2">
              The second value type.
            </typeparam>
            <typeparam name="TResult">
              The return value type.
            </typeparam>
            <param name="self">
              The <see cref="T:System.Func{T1,T2,TResult}" /> to curry.
            </param>
            <summary>
              Creates a <see cref="T:System.Func{T1,System.Func{T2,TResult}}" /> for currying.
            </summary>
            <returns>
              A <see cref="T:System.Func{T1,System.Func{T2,TResult}}" /> which, when invoked, will 
              return a <see cref="T:System.Func{T2,TResult}" /> which, when invoked, will 
              invoke <paramref name="self"/>.
            </returns>
            <remarks>
              <para>
               This is the more "traditional" view of currying, turning a method
               which takes <c>(X * Y)-&gt;Z</c> (i.e. separate arguments) into a
               <c>X -&gt; (Y -&gt; Z)</c> (that is a "chain" of nested Funcs such that
               you provide only one argument to each Func until you provide enough
               arguments to invoke the original method).
              </para>
              <code lang="C#">
              Func&lt;int,int,int,int&gt; function = (int a, int b, int c) =&gt; a + b + c;
              Func&lt;int,Func&lt;int,Func&lt;int, int&gt;&gt;&gt; curry = function.Curry ();
              Assert.AreEqual(6, curry (3)(2)(1));</code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.FuncCoda.Compose``4(System.Func{``2,``3},System.Func{``0,``1,``2})">
            <typeparam name="T1">
              A <see cref="T:System.Func{T1,T2,T3}" /> parameter type.
            </typeparam>
            <typeparam name="T3">
              The <see cref="T:System.Func{T1,T2,T3}" /> return type, and <see cref="T:System.Func{T3,TResult}" /> argument type.
            </typeparam>
            <typeparam name="TResult">
              The <see cref="T:System.Func{T3,TResult}" /> return type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Func{T1,T2,TResult}" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Func{T3,TResult}" /> to compose.
            </param>
            <param name="composer">
              The <see cref="T:System.Func{T1,T2,T3}" /> to compose with <paramref name="self" />.
            </param>
            <returns>
              Returns a <see cref="T:System.Func{T1,T2,TResult}" /> which, when invoked, will
              invoke <paramref name="composer"/> and pass the return value of
              <paramref name="composer" /> to <paramref name="self" />.
            </returns>
            <remarks>
              <para>
               Composition is useful for chaining delegates together, so that the
               return value of <paramref name="composer" /> is automatically used as
               the input parameter for <paramref name="self" />.
              </para>
              <code lang="C#">
              Func&lt;int,string> tostring = Lambda.F ((int n) => n.ToString ());
              Func&lt;int, int>    doubler = Lambda.F ((int n) => n * 2);
              Func&lt;int, string>
                   double_then_tostring = tostring.Compose (doubler);
              Console.WriteLine (double_then_tostring (5));
                  // Prints "10";</code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              <para>
                <paramref name="self" /> is <see langword="null" />.
              </para>
              <para>-or-</para>
              <para>
                <paramref name="composer" /> is <see langword="null" />.
              </para>
            </exception>
        </member>
        <member name="M:Cadenza.FuncCoda.Curry``4(System.Func{``0,``1,``2,``3},``0)">
            <typeparam name="T1">
              A <see cref="T:System.Func{T1,T2,T3,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Func{T1,T2,T3,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T3">
              A <see cref="T:System.Func{T1,T2,T3,TResult}" /> parameter type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Func{T2,T3,TResult}" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Func{T1,T2,T3,TResult}" /> to curry.
            </param>
            <param name="value1">
              A value of type <typeparamref name="T1"/> to fix.
            </param>
            <returns>
              Returns a <see cref="T:System.Func{T2,T3,TResult}" /> which, when invoked, will
              invoke <paramref name="self"/> along with the provided fixed parameters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.FuncCoda.Curry``4(System.Func{``0,``1,``2,``3},``0,``1)">
            <typeparam name="T1">
              A <see cref="T:System.Func{T1,T2,T3,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Func{T1,T2,T3,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T3">
              A <see cref="T:System.Func{T1,T2,T3,TResult}" /> parameter type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Func{T3,TResult}" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Func{T1,T2,T3,TResult}" /> to curry.
            </param>
            <param name="value1">
              A value of type <typeparamref name="T1"/> to fix.
            </param>
            <param name="value2">
              A value of type <typeparamref name="T2"/> to fix.
            </param>
            <returns>
              Returns a <see cref="T:System.Func{T3,TResult}" /> which, when invoked, will
              invoke <paramref name="self"/> along with the provided fixed parameters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.FuncCoda.Curry``4(System.Func{``0,``1,``2,``3},``0,``1,``2)">
            <typeparam name="T1">
              A <see cref="T:System.Func{T1,T2,T3,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Func{T1,T2,T3,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T3">
              A <see cref="T:System.Func{T1,T2,T3,TResult}" /> parameter type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Func{TResult}" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Func{T1,T2,T3,TResult}" /> to curry.
            </param>
            <param name="value1">
              A value of type <typeparamref name="T1"/> to fix.
            </param>
            <param name="value2">
              A value of type <typeparamref name="T2"/> to fix.
            </param>
            <param name="value3">
              A value of type <typeparamref name="T3"/> to fix.
            </param>
            <returns>
              Returns a <see cref="T:System.Func{TResult}" /> which, when invoked, will
              invoke <paramref name="self"/> along with the provided fixed parameters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.FuncCoda.Curry``4(System.Func{``0,``1,``2,``3},Cadenza.Tuple{``0})">
            <typeparam name="T1">
              A <see cref="T:System.Func{T1,T2,T3,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Func{T1,T2,T3,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T3">
              A <see cref="T:System.Func{T1,T2,T3,TResult}" /> parameter type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Func{T2,T3,TResult}" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Func{T1,T2,T3,TResult}" /> to curry.
            </param>
            <param name="values">
              A value of type <see cref="T:Tuple{T1}" /> which contains the values to fix.
            </param>
            <returns>
              Returns a <see cref="T:System.Func{T2,T3,TResult}" /> which, when invoked, will
              invoke <paramref name="self"/> along with the provided fixed parameters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.FuncCoda.Curry``4(System.Func{``0,``1,``2,``3},Cadenza.Tuple{``0,``1})">
            <typeparam name="T1">
              A <see cref="T:System.Func{T1,T2,T3,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Func{T1,T2,T3,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T3">
              A <see cref="T:System.Func{T1,T2,T3,TResult}" /> parameter type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Func{T3,TResult}" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Func{T1,T2,T3,TResult}" /> to curry.
            </param>
            <param name="values">
              A value of type <see cref="T:Tuple{T1,T2}" /> which contains the values to fix.
            </param>
            <returns>
              Returns a <see cref="T:System.Func{T3,TResult}" /> which, when invoked, will
              invoke <paramref name="self"/> along with the provided fixed parameters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.FuncCoda.Curry``4(System.Func{``0,``1,``2,``3},Cadenza.Tuple{``0,``1,``2})">
            <typeparam name="T1">
              A <see cref="T:System.Func{T1,T2,T3,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Func{T1,T2,T3,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T3">
              A <see cref="T:System.Func{T1,T2,T3,TResult}" /> parameter type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Func{TResult}" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Func{T1,T2,T3,TResult}" /> to curry.
            </param>
            <param name="values">
              A value of type <see cref="T:Tuple{T1,T2,T3}" /> which contains the values to fix.
            </param>
            <returns>
              Returns a <see cref="T:System.Func{TResult}" /> which, when invoked, will
              invoke <paramref name="self"/> along with the provided fixed parameters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.FuncCoda.Curry``4(System.Func{``0,``1,``2,``3})">
            <typeparam name="T1">
              The first value type.
            </typeparam>
            <typeparam name="T2">
              The second value type.
            </typeparam>
            <typeparam name="T3">
              The third value type.
            </typeparam>
            <typeparam name="TResult">
              The return value type.
            </typeparam>
            <param name="self">
              The <see cref="T:System.Func{T1,T2,T3,TResult}" /> to curry.
            </param>
            <summary>
              Creates a <see cref="T:System.Func{T1,System.Func{T2,System.Func{T3,TResult}}}" /> for currying.
            </summary>
            <returns>
              A <see cref="T:System.Func{T1,System.Func{T2,System.Func{T3,TResult}}}" /> which, when invoked, will 
              return a <see cref="T:System.Func{T2,System.Func{T3,TResult}}" /> which, when invoked, will return a <see cref="T:System.Func{T3,TResult}" /> which, when invoked, will 
              invoke <paramref name="self"/>.
            </returns>
            <remarks>
              <para>
               This is the more "traditional" view of currying, turning a method
               which takes <c>(X * Y)-&gt;Z</c> (i.e. separate arguments) into a
               <c>X -&gt; (Y -&gt; Z)</c> (that is a "chain" of nested Funcs such that
               you provide only one argument to each Func until you provide enough
               arguments to invoke the original method).
              </para>
              <code lang="C#">
              Func&lt;int,int,int,int&gt; function = (int a, int b, int c) =&gt; a + b + c;
              Func&lt;int,Func&lt;int,Func&lt;int, int&gt;&gt;&gt; curry = function.Curry ();
              Assert.AreEqual(6, curry (3)(2)(1));</code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.FuncCoda.Compose``5(System.Func{``3,``4},System.Func{``0,``1,``2,``3})">
            <typeparam name="T1">
              A <see cref="T:System.Func{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Func{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <typeparam name="T4">
              The <see cref="T:System.Func{T1,T2,T3,T4}" /> return type, and <see cref="T:System.Func{T4,TResult}" /> argument type.
            </typeparam>
            <typeparam name="TResult">
              The <see cref="T:System.Func{T4,TResult}" /> return type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Func{T1,T2,T3,TResult}" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Func{T4,TResult}" /> to compose.
            </param>
            <param name="composer">
              The <see cref="T:System.Func{T1,T2,T3,T4}" /> to compose with <paramref name="self" />.
            </param>
            <returns>
              Returns a <see cref="T:System.Func{T1,T2,T3,TResult}" /> which, when invoked, will
              invoke <paramref name="composer"/> and pass the return value of
              <paramref name="composer" /> to <paramref name="self" />.
            </returns>
            <remarks>
              <para>
               Composition is useful for chaining delegates together, so that the
               return value of <paramref name="composer" /> is automatically used as
               the input parameter for <paramref name="self" />.
              </para>
              <code lang="C#">
              Func&lt;int,string> tostring = Lambda.F ((int n) => n.ToString ());
              Func&lt;int, int>    doubler = Lambda.F ((int n) => n * 2);
              Func&lt;int, string>
                   double_then_tostring = tostring.Compose (doubler);
              Console.WriteLine (double_then_tostring (5));
                  // Prints "10";</code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              <para>
                <paramref name="self" /> is <see langword="null" />.
              </para>
              <para>-or-</para>
              <para>
                <paramref name="composer" /> is <see langword="null" />.
              </para>
            </exception>
        </member>
        <member name="M:Cadenza.FuncCoda.Curry``5(System.Func{``0,``1,``2,``3,``4},``0)">
            <typeparam name="T1">
              A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T3">
              A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T4">
              A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Func{T2,T3,T4,TResult}" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> to curry.
            </param>
            <param name="value1">
              A value of type <typeparamref name="T1"/> to fix.
            </param>
            <returns>
              Returns a <see cref="T:System.Func{T2,T3,T4,TResult}" /> which, when invoked, will
              invoke <paramref name="self"/> along with the provided fixed parameters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.FuncCoda.Curry``5(System.Func{``0,``1,``2,``3,``4},``0,``1)">
            <typeparam name="T1">
              A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T3">
              A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T4">
              A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Func{T3,T4,TResult}" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> to curry.
            </param>
            <param name="value1">
              A value of type <typeparamref name="T1"/> to fix.
            </param>
            <param name="value2">
              A value of type <typeparamref name="T2"/> to fix.
            </param>
            <returns>
              Returns a <see cref="T:System.Func{T3,T4,TResult}" /> which, when invoked, will
              invoke <paramref name="self"/> along with the provided fixed parameters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.FuncCoda.Curry``5(System.Func{``0,``1,``2,``3,``4},``0,``1,``2)">
            <typeparam name="T1">
              A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T3">
              A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T4">
              A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Func{T4,TResult}" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> to curry.
            </param>
            <param name="value1">
              A value of type <typeparamref name="T1"/> to fix.
            </param>
            <param name="value2">
              A value of type <typeparamref name="T2"/> to fix.
            </param>
            <param name="value3">
              A value of type <typeparamref name="T3"/> to fix.
            </param>
            <returns>
              Returns a <see cref="T:System.Func{T4,TResult}" /> which, when invoked, will
              invoke <paramref name="self"/> along with the provided fixed parameters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.FuncCoda.Curry``5(System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <typeparam name="T1">
              A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T3">
              A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T4">
              A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Func{TResult}" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> to curry.
            </param>
            <param name="value1">
              A value of type <typeparamref name="T1"/> to fix.
            </param>
            <param name="value2">
              A value of type <typeparamref name="T2"/> to fix.
            </param>
            <param name="value3">
              A value of type <typeparamref name="T3"/> to fix.
            </param>
            <param name="value4">
              A value of type <typeparamref name="T4"/> to fix.
            </param>
            <returns>
              Returns a <see cref="T:System.Func{TResult}" /> which, when invoked, will
              invoke <paramref name="self"/> along with the provided fixed parameters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.FuncCoda.Curry``5(System.Func{``0,``1,``2,``3,``4},Cadenza.Tuple{``0})">
            <typeparam name="T1">
              A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T3">
              A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T4">
              A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Func{T2,T3,T4,TResult}" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> to curry.
            </param>
            <param name="values">
              A value of type <see cref="T:Tuple{T1}" /> which contains the values to fix.
            </param>
            <returns>
              Returns a <see cref="T:System.Func{T2,T3,T4,TResult}" /> which, when invoked, will
              invoke <paramref name="self"/> along with the provided fixed parameters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.FuncCoda.Curry``5(System.Func{``0,``1,``2,``3,``4},Cadenza.Tuple{``0,``1})">
            <typeparam name="T1">
              A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T3">
              A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T4">
              A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Func{T3,T4,TResult}" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> to curry.
            </param>
            <param name="values">
              A value of type <see cref="T:Tuple{T1,T2}" /> which contains the values to fix.
            </param>
            <returns>
              Returns a <see cref="T:System.Func{T3,T4,TResult}" /> which, when invoked, will
              invoke <paramref name="self"/> along with the provided fixed parameters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.FuncCoda.Curry``5(System.Func{``0,``1,``2,``3,``4},Cadenza.Tuple{``0,``1,``2})">
            <typeparam name="T1">
              A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T3">
              A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T4">
              A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Func{T4,TResult}" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> to curry.
            </param>
            <param name="values">
              A value of type <see cref="T:Tuple{T1,T2,T3}" /> which contains the values to fix.
            </param>
            <returns>
              Returns a <see cref="T:System.Func{T4,TResult}" /> which, when invoked, will
              invoke <paramref name="self"/> along with the provided fixed parameters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.FuncCoda.Curry``5(System.Func{``0,``1,``2,``3,``4},Cadenza.Tuple{``0,``1,``2,``3})">
            <typeparam name="T1">
              A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T3">
              A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T4">
              A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Func{TResult}" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> to curry.
            </param>
            <param name="values">
              A value of type <see cref="T:Tuple{T1,T2,T3,T4}" /> which contains the values to fix.
            </param>
            <returns>
              Returns a <see cref="T:System.Func{TResult}" /> which, when invoked, will
              invoke <paramref name="self"/> along with the provided fixed parameters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.FuncCoda.Curry``5(System.Func{``0,``1,``2,``3,``4})">
            <typeparam name="T1">
              The first value type.
            </typeparam>
            <typeparam name="T2">
              The second value type.
            </typeparam>
            <typeparam name="T3">
              The third value type.
            </typeparam>
            <typeparam name="T4">
              The fourth value type.
            </typeparam>
            <typeparam name="TResult">
              The return value type.
            </typeparam>
            <param name="self">
              The <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> to curry.
            </param>
            <summary>
              Creates a <see cref="T:System.Func{T1,System.Func{T2,System.Func{T3,System.Func{T4,TResult}}}}" /> for currying.
            </summary>
            <returns>
              A <see cref="T:System.Func{T1,System.Func{T2,System.Func{T3,System.Func{T4,TResult}}}}" /> which, when invoked, will 
              return a <see cref="T:System.Func{T2,System.Func{T3,System.Func{T4,TResult}}}" /> which, when invoked, will return a <see cref="T:System.Func{T3,System.Func{T4,TResult}}" /> which, when invoked, will return a <see cref="T:System.Func{T4,TResult}" /> which, when invoked, will 
              invoke <paramref name="self"/>.
            </returns>
            <remarks>
              <para>
               This is the more "traditional" view of currying, turning a method
               which takes <c>(X * Y)-&gt;Z</c> (i.e. separate arguments) into a
               <c>X -&gt; (Y -&gt; Z)</c> (that is a "chain" of nested Funcs such that
               you provide only one argument to each Func until you provide enough
               arguments to invoke the original method).
              </para>
              <code lang="C#">
              Func&lt;int,int,int,int&gt; function = (int a, int b, int c) =&gt; a + b + c;
              Func&lt;int,Func&lt;int,Func&lt;int, int&gt;&gt;&gt; curry = function.Curry ();
              Assert.AreEqual(6, curry (3)(2)(1));</code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.FuncCoda.Compose``6(System.Func{``4,``5},System.Func{``0,``1,``2,``3,``4})">
            <typeparam name="T1">
              A <see cref="T:System.Func{T1,T2,T3,T4,T5}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Func{T1,T2,T3,T4,T5}" /> parameter type.
            </typeparam>
            <typeparam name="T3">
              A <see cref="T:System.Func{T1,T2,T3,T4,T5}" /> parameter type.
            </typeparam>
            <typeparam name="T5">
              The <see cref="T:System.Func{T1,T2,T3,T4,T5}" /> return type, and <see cref="T:System.Func{T5,TResult}" /> argument type.
            </typeparam>
            <typeparam name="TResult">
              The <see cref="T:System.Func{T5,TResult}" /> return type.
            </typeparam>
            <summary>
              Creates a <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> delegate.
            </summary>
            <param name="self">
              The <see cref="T:System.Func{T5,TResult}" /> to compose.
            </param>
            <param name="composer">
              The <see cref="T:System.Func{T1,T2,T3,T4,T5}" /> to compose with <paramref name="self" />.
            </param>
            <returns>
              Returns a <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> which, when invoked, will
              invoke <paramref name="composer"/> and pass the return value of
              <paramref name="composer" /> to <paramref name="self" />.
            </returns>
            <remarks>
              <para>
               Composition is useful for chaining delegates together, so that the
               return value of <paramref name="composer" /> is automatically used as
               the input parameter for <paramref name="self" />.
              </para>
              <code lang="C#">
              Func&lt;int,string> tostring = Lambda.F ((int n) => n.ToString ());
              Func&lt;int, int>    doubler = Lambda.F ((int n) => n * 2);
              Func&lt;int, string>
                   double_then_tostring = tostring.Compose (doubler);
              Console.WriteLine (double_then_tostring (5));
                  // Prints "10";</code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              <para>
                <paramref name="self" /> is <see langword="null" />.
              </para>
              <para>-or-</para>
              <para>
                <paramref name="composer" /> is <see langword="null" />.
              </para>
            </exception>
        </member>
        <member name="T:Cadenza.Lambda">
            <summary>
              Provides static utility methods to generate anonymous delegates 
              or expression trees of pre-determined types.
            </summary>
            <remarks>
              <para>
               C# lambda methods and anonymous delegates are a curious 
               1.5-class citizen: They are implicitly convertable to any
               delegate type, but have no type by themselves.  Thus,
               the following code fails to compile:
              </para>
              <code lang="C#">
              ((int x) => Console.WriteLine (x))(5);
              </code>
              <para>It would instead need:</para>
              <code lang="C#">
              // either:
              Action&lt;int&gt; a = x => Console.WriteLine (x);
              a (5);
              //
              // or
              //
              ((Action&lt;int&gt;) (x => Console.WriteLine (x)))(5);
              </code>
              <para>
               So you'd either need to assign the lambda to an actual
               delegate type, or insert a cast.
              </para>
              <para>
               <see cref="M:Cadenza.Lambda.A" /> allows you to
               provide a lambda body for the <see cref="T:System.Action"/> 
               builtin delegate type, and <see cref="M:Cadenza.Lambda.F" />
               allows you to provide a lambda body for the 
               <see cref="T:System.Func{TResult}"/> delegate type, 
               thus removing the need for a cast or an extra variable:
              </para>
              <code lang="C#">
              Lambda.F ((int x) => Console.WriteLine (x)) (5);</code>
              <para>
               <see cref="T:Cadenza.Lambda"/> provides the following sets of
               functionality:
              </para>
              <list type="bullet">
               <item><term>Delegate creation methods, which return 
                <see cref="T:System.Action"/>-like delegates:
                <see cref="M:Cadenza.Lambda.A(System.Action)"/>,
                <see cref="M:Cadenza.Lambda.A``1(System.Action{``0})"/>,
                <see cref="M:Cadenza.Lambda.A``2(System.Action{``0,``1})"/>,
                <see cref="M:Cadenza.Lambda.A``3(System.Action{``0,``1,``2})"/>, and
                <see cref="M:Cadenza.Lambda.A``4(System.Action{``0,``1,``2,``3})"/>.
               </term></item>
               <item><term>Delegate creation methods which return 
                return <see cref="T:System.Func{TResult}"/>-like delegates
                <see cref="M:Cadenza.Lambda.F``1(System.Func{``0})"/>,
                <see cref="M:Cadenza.Lambda.F``2(System.Func{``0,``1})"/>,
                <see cref="M:Cadenza.Lambda.F``3(System.Func{``0,``1,``2})"/>,
                <see cref="M:Cadenza.Lambda.F``4(System.Func{``0,``1,``2,``3})"/>, and
                <see cref="M:Cadenza.Lambda.F``5(System.Func{``0,``1,``2,``3,``4})"/>.
               </term></item>
               <item><term><see cref="T:System.Linq.Expressions.Expression"/>-creating methods:
                <see cref="M:Cadenza.Lambda.XA(System.Linq.Expressions.Expression{System.Action})"/>,
                <see cref="M:Cadenza.Lambda.XA``1(System.Linq.Expressions.Expression{System.Action{``0}})"/>,
                <see cref="M:Cadenza.Lambda.XA``2(System.Linq.Expressions.Expression{System.Action{``0,``1}})"/>,
                <see cref="M:Cadenza.Lambda.XA``3(System.Linq.Expressions.Expression{System.Action{``0,``1,``2}})"/>,
                <see cref="M:Cadenza.Lambda.XA``4(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3}})"/>, and
                <see cref="M:Cadenza.Lambda.XF``1(System.Linq.Expressions.Expression{System.Func{``0}})"/>,
                <see cref="M:Cadenza.Lambda.XF``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})"/>,
                <see cref="M:Cadenza.Lambda.XF``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})"/>,
                <see cref="M:Cadenza.Lambda.XF``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})"/>,
                <see cref="M:Cadenza.Lambda.XF``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})"/>.
               </term></item>
               <item><term>Y-Combinators, which permit writing recursive lambdas:
                <see cref="M:Cadenza.Lambda.RecFunc``2(System.Func{System.Func{``0,``1},System.Func{``0,``1}})"/>,
                <see cref="M:Cadenza.Lambda.RecFunc``3(System.Func{System.Func{``0,``1,``2},System.Func{``0,``1,``2}})"/>,
                <see cref="M:Cadenza.Lambda.RecFunc``4(System.Func{System.Func{``0,``1,``2,``3},System.Func{``0,``1,``2,``3}})"/>, and
                <see cref="M:Cadenza.Lambda.RecFunc``5(System.Func{System.Func{``0,``1,``2,``3,``4},System.Func{``0,``1,``2,``3,``4}})"/>.
               </term></item>
              </list>
            </remarks>
        </member>
        <member name="M:Cadenza.Lambda.A(System.Action)">
            <param name="lambda">
              The <see cref="T:System.Action" /> to return.
            </param>
            <summary>
              Creates a <see cref="T:System.Action" /> delegate.
            </summary>
            <returns>
              Returns <paramref name="lambda" />.
            </returns>
        </member>
        <member name="M:Cadenza.Lambda.F``1(System.Func{``0})">
            <typeparam name="TResult">
              A <see cref="T:System.Func{TResult}" /> return type.
            </typeparam>
            <param name="lambda">
              The <see cref="T:System.Func{TResult}" /> to return.
            </param>
            <summary>
              Creates a <see cref="T:System.Func{TResult}" /> delegate.
            </summary>
            <returns>
              Returns <paramref name="lambda" />.
            </returns>
        </member>
        <member name="M:Cadenza.Lambda.XA(System.Linq.Expressions.Expression{System.Action})">
            <param name="expr">
              The <see cref="T:System.Linq.Expressions.Expression{System.Action}" /> to return.
            </param>
            <summary>
              Creates a <see cref="T:System.Linq.Expressions.Expression{System.Action}" /> expression tree.
            </summary>
            <returns>
              Returns <paramref name="expr" />.
            </returns>
        </member>
        <member name="M:Cadenza.Lambda.XF``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <typeparam name="TResult">
              A <see cref="T:System.Linq.Expressions.Expression{System.Func{TResult}}" /> return type.
            </typeparam>
            <param name="expr">
              The <see cref="T:System.Linq.Expressions.Expression{System.Func{TResult}}" /> to return.
            </param>
            <summary>
              Creates a <see cref="T:System.Linq.Expressions.Expression{System.Func{TResult}}" /> expression tree.
            </summary>
            <returns>
              Returns <paramref name="expr" />.
            </returns>
        </member>
        <member name="M:Cadenza.Lambda.A``1(System.Action{``0})">
            <typeparam name="T">
              A <see cref="T:System.Action{T}" /> parameter type.
            </typeparam>
            <param name="lambda">
              The <see cref="T:System.Action{T}" /> to return.
            </param>
            <summary>
              Creates a <see cref="T:System.Action{T}" /> delegate.
            </summary>
            <returns>
              Returns <paramref name="lambda" />.
            </returns>
        </member>
        <member name="M:Cadenza.Lambda.F``2(System.Func{``0,``1})">
            <typeparam name="T">
              A <see cref="T:System.Func{T,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="TResult">
              A <see cref="T:System.Func{T,TResult}" /> return type.
            </typeparam>
            <param name="lambda">
              The <see cref="T:System.Func{T,TResult}" /> to return.
            </param>
            <summary>
              Creates a <see cref="T:System.Func{T,TResult}" /> delegate.
            </summary>
            <returns>
              Returns <paramref name="lambda" />.
            </returns>
        </member>
        <member name="M:Cadenza.Lambda.XA``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <typeparam name="T">
              A <see cref="T:System.Linq.Expressions.Expression{System.Action{T}}" /> parameter type.
            </typeparam>
            <param name="expr">
              The <see cref="T:System.Linq.Expressions.Expression{System.Action{T}}" /> to return.
            </param>
            <summary>
              Creates a <see cref="T:System.Linq.Expressions.Expression{System.Action{T}}" /> expression tree.
            </summary>
            <returns>
              Returns <paramref name="expr" />.
            </returns>
        </member>
        <member name="M:Cadenza.Lambda.XF``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <typeparam name="T">
              A <see cref="T:System.Linq.Expressions.Expression{System.Func{T,TResult}}" /> parameter type.
            </typeparam>
            <typeparam name="TResult">
              A <see cref="T:System.Linq.Expressions.Expression{System.Func{T,TResult}}" /> return type.
            </typeparam>
            <param name="expr">
              The <see cref="T:System.Linq.Expressions.Expression{System.Func{T,TResult}}" /> to return.
            </param>
            <summary>
              Creates a <see cref="T:System.Linq.Expressions.Expression{System.Func{T,TResult}}" /> expression tree.
            </summary>
            <returns>
              Returns <paramref name="expr" />.
            </returns>
        </member>
        <member name="M:Cadenza.Lambda.RecFunc``2(System.Func{System.Func{``0,``1},System.Func{``0,``1}})">
            <typeparam name="T">
              A <see cref="T:System.Func{T,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="TResult">
              A <see cref="T:System.Func{T,TResult}" /> return type.
            </typeparam>
            <param name="lambda">
              The <see cref="T:System.Func{T,TResult}" /> to use.
            </param>
            <summary>
              Creates a <see cref="T:System.Func{T,TResult}" /> delegate, which may be recursive.
            </summary>
            <returns>
              Returns a <see cref="T:System.Func{T,TResult}" /> which (eventually) invokes <paramref name="lambda"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="lambda"/> is <see langword="null" />.
            </exception>
            <remarks>
              <para>
                The following example makes use of a recursive lambda:
              </para>
              <code lang="C#">
                Func&lt;int, int> factorial = Lambda.RecFunc&lt;int, int> (
                    fac => x => x == 0 ? 1 : x * fac (x-1));
                Console.WriteLine (factorial (5));  // prints "120"
              </code>
            </remarks>
        </member>
        <member name="M:Cadenza.Lambda.A``2(System.Action{``0,``1})">
            <typeparam name="T1">
              A <see cref="T:System.Action{T1,T2}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Action{T1,T2}" /> parameter type.
            </typeparam>
            <param name="lambda">
              The <see cref="T:System.Action{T1,T2}" /> to return.
            </param>
            <summary>
              Creates a <see cref="T:System.Action{T1,T2}" /> delegate.
            </summary>
            <returns>
              Returns <paramref name="lambda" />.
            </returns>
        </member>
        <member name="M:Cadenza.Lambda.F``3(System.Func{``0,``1,``2})">
            <typeparam name="T1">
              A <see cref="T:System.Func{T1,T2,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Func{T1,T2,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="TResult">
              A <see cref="T:System.Func{T1,T2,TResult}" /> return type.
            </typeparam>
            <param name="lambda">
              The <see cref="T:System.Func{T1,T2,TResult}" /> to return.
            </param>
            <summary>
              Creates a <see cref="T:System.Func{T1,T2,TResult}" /> delegate.
            </summary>
            <returns>
              Returns <paramref name="lambda" />.
            </returns>
        </member>
        <member name="M:Cadenza.Lambda.XA``2(System.Linq.Expressions.Expression{System.Action{``0,``1}})">
            <typeparam name="T1">
              A <see cref="T:System.Linq.Expressions.Expression{System.Action{T1,T2}}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Linq.Expressions.Expression{System.Action{T1,T2}}" /> parameter type.
            </typeparam>
            <param name="expr">
              The <see cref="T:System.Linq.Expressions.Expression{System.Action{T1,T2}}" /> to return.
            </param>
            <summary>
              Creates a <see cref="T:System.Linq.Expressions.Expression{System.Action{T1,T2}}" /> expression tree.
            </summary>
            <returns>
              Returns <paramref name="expr" />.
            </returns>
        </member>
        <member name="M:Cadenza.Lambda.XF``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <typeparam name="T1">
              A <see cref="T:System.Linq.Expressions.Expression{System.Func{T1,T2,TResult}}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Linq.Expressions.Expression{System.Func{T1,T2,TResult}}" /> parameter type.
            </typeparam>
            <typeparam name="TResult">
              A <see cref="T:System.Linq.Expressions.Expression{System.Func{T1,T2,TResult}}" /> return type.
            </typeparam>
            <param name="expr">
              The <see cref="T:System.Linq.Expressions.Expression{System.Func{T1,T2,TResult}}" /> to return.
            </param>
            <summary>
              Creates a <see cref="T:System.Linq.Expressions.Expression{System.Func{T1,T2,TResult}}" /> expression tree.
            </summary>
            <returns>
              Returns <paramref name="expr" />.
            </returns>
        </member>
        <member name="M:Cadenza.Lambda.RecFunc``3(System.Func{System.Func{``0,``1,``2},System.Func{``0,``1,``2}})">
            <typeparam name="T1">
              A <see cref="T:System.Func{T1,T2,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Func{T1,T2,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="TResult">
              A <see cref="T:System.Func{T1,T2,TResult}" /> return type.
            </typeparam>
            <param name="lambda">
              The <see cref="T:System.Func{T1,T2,TResult}" /> to use.
            </param>
            <summary>
              Creates a <see cref="T:System.Func{T1,T2,TResult}" /> delegate, which may be recursive.
            </summary>
            <returns>
              Returns a <see cref="T:System.Func{T1,T2,TResult}" /> which (eventually) invokes <paramref name="lambda"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="lambda"/> is <see langword="null" />.
            </exception>
            <remarks>
              <para>
                The following example makes use of a recursive lambda:
              </para>
              <code lang="C#">
                Func&lt;int, int> factorial = Lambda.RecFunc&lt;int, int> (
                    fac => x => x == 0 ? 1 : x * fac (x-1));
                Console.WriteLine (factorial (5));  // prints "120"
              </code>
            </remarks>
        </member>
        <member name="M:Cadenza.Lambda.A``3(System.Action{``0,``1,``2})">
            <typeparam name="T1">
              A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
            <typeparam name="T3">
              A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
            <param name="lambda">
              The <see cref="T:System.Action{T1,T2,T3}" /> to return.
            </param>
            <summary>
              Creates a <see cref="T:System.Action{T1,T2,T3}" /> delegate.
            </summary>
            <returns>
              Returns <paramref name="lambda" />.
            </returns>
        </member>
        <member name="M:Cadenza.Lambda.F``4(System.Func{``0,``1,``2,``3})">
            <typeparam name="T1">
              A <see cref="T:System.Func{T1,T2,T3,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Func{T1,T2,T3,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T3">
              A <see cref="T:System.Func{T1,T2,T3,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="TResult">
              A <see cref="T:System.Func{T1,T2,T3,TResult}" /> return type.
            </typeparam>
            <param name="lambda">
              The <see cref="T:System.Func{T1,T2,T3,TResult}" /> to return.
            </param>
            <summary>
              Creates a <see cref="T:System.Func{T1,T2,T3,TResult}" /> delegate.
            </summary>
            <returns>
              Returns <paramref name="lambda" />.
            </returns>
        </member>
        <member name="M:Cadenza.Lambda.XA``3(System.Linq.Expressions.Expression{System.Action{``0,``1,``2}})">
            <typeparam name="T1">
              A <see cref="T:System.Linq.Expressions.Expression{System.Action{T1,T2,T3}}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Linq.Expressions.Expression{System.Action{T1,T2,T3}}" /> parameter type.
            </typeparam>
            <typeparam name="T3">
              A <see cref="T:System.Linq.Expressions.Expression{System.Action{T1,T2,T3}}" /> parameter type.
            </typeparam>
            <param name="expr">
              The <see cref="T:System.Linq.Expressions.Expression{System.Action{T1,T2,T3}}" /> to return.
            </param>
            <summary>
              Creates a <see cref="T:System.Linq.Expressions.Expression{System.Action{T1,T2,T3}}" /> expression tree.
            </summary>
            <returns>
              Returns <paramref name="expr" />.
            </returns>
        </member>
        <member name="M:Cadenza.Lambda.XF``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
            <typeparam name="T1">
              A <see cref="T:System.Linq.Expressions.Expression{System.Func{T1,T2,T3,TResult}}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Linq.Expressions.Expression{System.Func{T1,T2,T3,TResult}}" /> parameter type.
            </typeparam>
            <typeparam name="T3">
              A <see cref="T:System.Linq.Expressions.Expression{System.Func{T1,T2,T3,TResult}}" /> parameter type.
            </typeparam>
            <typeparam name="TResult">
              A <see cref="T:System.Linq.Expressions.Expression{System.Func{T1,T2,T3,TResult}}" /> return type.
            </typeparam>
            <param name="expr">
              The <see cref="T:System.Linq.Expressions.Expression{System.Func{T1,T2,T3,TResult}}" /> to return.
            </param>
            <summary>
              Creates a <see cref="T:System.Linq.Expressions.Expression{System.Func{T1,T2,T3,TResult}}" /> expression tree.
            </summary>
            <returns>
              Returns <paramref name="expr" />.
            </returns>
        </member>
        <member name="M:Cadenza.Lambda.RecFunc``4(System.Func{System.Func{``0,``1,``2,``3},System.Func{``0,``1,``2,``3}})">
            <typeparam name="T1">
              A <see cref="T:System.Func{T1,T2,T3,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Func{T1,T2,T3,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T3">
              A <see cref="T:System.Func{T1,T2,T3,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="TResult">
              A <see cref="T:System.Func{T1,T2,T3,TResult}" /> return type.
            </typeparam>
            <param name="lambda">
              The <see cref="T:System.Func{T1,T2,T3,TResult}" /> to use.
            </param>
            <summary>
              Creates a <see cref="T:System.Func{T1,T2,T3,TResult}" /> delegate, which may be recursive.
            </summary>
            <returns>
              Returns a <see cref="T:System.Func{T1,T2,T3,TResult}" /> which (eventually) invokes <paramref name="lambda"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="lambda"/> is <see langword="null" />.
            </exception>
            <remarks>
              <para>
                The following example makes use of a recursive lambda:
              </para>
              <code lang="C#">
                Func&lt;int, int> factorial = Lambda.RecFunc&lt;int, int> (
                    fac => x => x == 0 ? 1 : x * fac (x-1));
                Console.WriteLine (factorial (5));  // prints "120"
              </code>
            </remarks>
        </member>
        <member name="M:Cadenza.Lambda.A``4(System.Action{``0,``1,``2,``3})">
            <typeparam name="T1">
              A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <typeparam name="T3">
              A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <typeparam name="T4">
              A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
            <param name="lambda">
              The <see cref="T:System.Action{T1,T2,T3,T4}" /> to return.
            </param>
            <summary>
              Creates a <see cref="T:System.Action{T1,T2,T3,T4}" /> delegate.
            </summary>
            <returns>
              Returns <paramref name="lambda" />.
            </returns>
        </member>
        <member name="M:Cadenza.Lambda.F``5(System.Func{``0,``1,``2,``3,``4})">
            <typeparam name="T1">
              A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T3">
              A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T4">
              A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="TResult">
              A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> return type.
            </typeparam>
            <param name="lambda">
              The <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> to return.
            </param>
            <summary>
              Creates a <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> delegate.
            </summary>
            <returns>
              Returns <paramref name="lambda" />.
            </returns>
        </member>
        <member name="M:Cadenza.Lambda.XA``4(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3}})">
            <typeparam name="T1">
              A <see cref="T:System.Linq.Expressions.Expression{System.Action{T1,T2,T3,T4}}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Linq.Expressions.Expression{System.Action{T1,T2,T3,T4}}" /> parameter type.
            </typeparam>
            <typeparam name="T3">
              A <see cref="T:System.Linq.Expressions.Expression{System.Action{T1,T2,T3,T4}}" /> parameter type.
            </typeparam>
            <typeparam name="T4">
              A <see cref="T:System.Linq.Expressions.Expression{System.Action{T1,T2,T3,T4}}" /> parameter type.
            </typeparam>
            <param name="expr">
              The <see cref="T:System.Linq.Expressions.Expression{System.Action{T1,T2,T3,T4}}" /> to return.
            </param>
            <summary>
              Creates a <see cref="T:System.Linq.Expressions.Expression{System.Action{T1,T2,T3,T4}}" /> expression tree.
            </summary>
            <returns>
              Returns <paramref name="expr" />.
            </returns>
        </member>
        <member name="M:Cadenza.Lambda.XF``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
            <typeparam name="T1">
              A <see cref="T:System.Linq.Expressions.Expression{System.Func{T1,T2,T3,T4,TResult}}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Linq.Expressions.Expression{System.Func{T1,T2,T3,T4,TResult}}" /> parameter type.
            </typeparam>
            <typeparam name="T3">
              A <see cref="T:System.Linq.Expressions.Expression{System.Func{T1,T2,T3,T4,TResult}}" /> parameter type.
            </typeparam>
            <typeparam name="T4">
              A <see cref="T:System.Linq.Expressions.Expression{System.Func{T1,T2,T3,T4,TResult}}" /> parameter type.
            </typeparam>
            <typeparam name="TResult">
              A <see cref="T:System.Linq.Expressions.Expression{System.Func{T1,T2,T3,T4,TResult}}" /> return type.
            </typeparam>
            <param name="expr">
              The <see cref="T:System.Linq.Expressions.Expression{System.Func{T1,T2,T3,T4,TResult}}" /> to return.
            </param>
            <summary>
              Creates a <see cref="T:System.Linq.Expressions.Expression{System.Func{T1,T2,T3,T4,TResult}}" /> expression tree.
            </summary>
            <returns>
              Returns <paramref name="expr" />.
            </returns>
        </member>
        <member name="M:Cadenza.Lambda.RecFunc``5(System.Func{System.Func{``0,``1,``2,``3,``4},System.Func{``0,``1,``2,``3,``4}})">
            <typeparam name="T1">
              A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T2">
              A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T3">
              A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="T4">
              A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
            <typeparam name="TResult">
              A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> return type.
            </typeparam>
            <param name="lambda">
              The <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> to use.
            </param>
            <summary>
              Creates a <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> delegate, which may be recursive.
            </summary>
            <returns>
              Returns a <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> which (eventually) invokes <paramref name="lambda"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="lambda"/> is <see langword="null" />.
            </exception>
            <remarks>
              <para>
                The following example makes use of a recursive lambda:
              </para>
              <code lang="C#">
                Func&lt;int, int> factorial = Lambda.RecFunc&lt;int, int> (
                    fac => x => x == 0 ? 1 : x * fac (x-1));
                Console.WriteLine (factorial (5));  // prints "120"
              </code>
            </remarks>
        </member>
        <member name="T:Cadenza.Tuple">
            <summary>
              Utility methods to create Tuple instances.
            </summary>
            <remarks>
              <para>
               Provides a set of <see cref="M:Cadenza.Tuple.Create"/> methods so that
               C# type inferencing can easily be used with tuples.  For example,
               instead of:
              </para>
              <code lang="C#">
              Tuple&lt;int, long&gt; a = new Tuple&lt;int, long&gt; (1, 2L);</code>
              <para>You can instead write:</para>
              <code lang="C#">
              Tuple&lt;int, long&gt; b = Tuple.Create (1, 2L);
              // or
              var              c = Tuple.Create (1, 2L);</code>
            </remarks>
        </member>
        <member name="M:Cadenza.Tuple.Create``1(``0)">
            <typeparam name="T">
              The first <see cref="T:Cadenza.Tuple{T}"/> value type.
            </typeparam>
            <summary>
              Creates a <see cref="T:Cadenza.Tuple`1"/>.
            </summary>
            <param name="item1">
              The first <see cref="T:Cadenza.Tuple{T}"/> value.
            </param>
            <returns>
              A <see cref="T:Cadenza.Tuple{T}"/> initialized with the parameter values.
            </returns>
            <seealso cref="C:Cadenza.Tuple{T}(`0)"/>
        </member>
        <member name="M:Cadenza.Tuple.Create``2(``0,``1)">
            <typeparam name="T1">
              The first <see cref="T:Cadenza.Tuple{T1,T2}"/> value type.
            </typeparam>
            <typeparam name="T2">
              The second <see cref="T:Cadenza.Tuple{T1,T2}"/> value type.
            </typeparam>
            <summary>
              Creates a <see cref="T:Cadenza.Tuple`2"/>.
            </summary>
            <param name="item1">
              The first <see cref="T:Cadenza.Tuple{T1,T2}"/> value.
            </param>
            <param name="item2">
              The second <see cref="T:Cadenza.Tuple{T1,T2}"/> value.
            </param>
            <returns>
              A <see cref="T:Cadenza.Tuple{T1,T2}"/> initialized with the parameter values.
            </returns>
            <seealso cref="C:Cadenza.Tuple{T1,T2}(`0,`1)"/>
        </member>
        <member name="M:Cadenza.Tuple.Create``3(``0,``1,``2)">
            <typeparam name="T1">
              The first <see cref="T:Cadenza.Tuple{T1,T2,T3}"/> value type.
            </typeparam>
            <typeparam name="T2">
              The second <see cref="T:Cadenza.Tuple{T1,T2,T3}"/> value type.
            </typeparam>
            <typeparam name="T3">
              The third <see cref="T:Cadenza.Tuple{T1,T2,T3}"/> value type.
            </typeparam>
            <summary>
              Creates a <see cref="T:Cadenza.Tuple`3"/>.
            </summary>
            <param name="item1">
              The first <see cref="T:Cadenza.Tuple{T1,T2,T3}"/> value.
            </param>
            <param name="item2">
              The second <see cref="T:Cadenza.Tuple{T1,T2,T3}"/> value.
            </param>
            <param name="item3">
              The third <see cref="T:Cadenza.Tuple{T1,T2,T3}"/> value.
            </param>
            <returns>
              A <see cref="T:Cadenza.Tuple{T1,T2,T3}"/> initialized with the parameter values.
            </returns>
            <seealso cref="C:Cadenza.Tuple{T1,T2,T3}(`0,`1,`2)"/>
        </member>
        <member name="M:Cadenza.Tuple.Create``4(``0,``1,``2,``3)">
            <typeparam name="T1">
              The first <see cref="T:Cadenza.Tuple{T1,T2,T3,T4}"/> value type.
            </typeparam>
            <typeparam name="T2">
              The second <see cref="T:Cadenza.Tuple{T1,T2,T3,T4}"/> value type.
            </typeparam>
            <typeparam name="T3">
              The third <see cref="T:Cadenza.Tuple{T1,T2,T3,T4}"/> value type.
            </typeparam>
            <typeparam name="T4">
              The fourth <see cref="T:Cadenza.Tuple{T1,T2,T3,T4}"/> value type.
            </typeparam>
            <summary>
              Creates a <see cref="T:Cadenza.Tuple`4"/>.
            </summary>
            <param name="item1">
              The first <see cref="T:Cadenza.Tuple{T1,T2,T3,T4}"/> value.
            </param>
            <param name="item2">
              The second <see cref="T:Cadenza.Tuple{T1,T2,T3,T4}"/> value.
            </param>
            <param name="item3">
              The third <see cref="T:Cadenza.Tuple{T1,T2,T3,T4}"/> value.
            </param>
            <param name="item4">
              The fourth <see cref="T:Cadenza.Tuple{T1,T2,T3,T4}"/> value.
            </param>
            <returns>
              A <see cref="T:Cadenza.Tuple{T1,T2,T3,T4}"/> initialized with the parameter values.
            </returns>
            <seealso cref="C:Cadenza.Tuple{T1,T2,T3,T4}(`0,`1,`2,`3)"/>
        </member>
        <member name="P:Cadenza.Tuple.MaxValues">
            <summary>
              The maximum number of Tuple types provided.
            </summary>
            <value>
              The maximum number of Tuple types provided.
            </value>
            <remarks>
                <para>
                 Only tuples up to a certain "arity" are supported; for example,
                 a <c>Tuple&lt;T1, T2, ..., T100&gt;</c> isn't supported (and won't
                 likely ever be).
                </para>
                <para>
                 <see cref="P:Cadenza.Tuple.MaxValues" /> is the maximum number of
                 values that the Tuple types support.  If you need to support
                 more values, then you need to either live with potential boxing
                 and use a e.g. <see cref="T:System.Collections.Generic.List{System.Object}" />
                 or nest Tuple instantiations, e.g. 
                 <c>Tuple&lt;int, Tuple&lt;int, Tuple&lt;int, Tuple&lt;int, int>>>></c>.
                 The problem with such nesting is that it becomes "unnatural" to access 
                 later elements -- <c>t._2._2._2._2</c> to access the fifth value for
                 the previous example.
                </para>
            </remarks>
        </member>
        <member name="T:Cadenza.Tuple`1">
            <typeparam name="T">
              The first value type.
            </typeparam>
            <summary>
              A strongly-typed sequence of 1 variously typed values.
            </summary>
            <remarks>
              <para>
               A <c>Tuple</c> is an immutable, strongly typed sequence of variously
               typed values with each value lacking an otherwise meaningful name aside
               from its position.
              </para>
            </remarks>
        </member>
        <member name="M:Cadenza.Tuple`1.#ctor(`0)">
            <summary>
              Constructs and initializes a new <see cref="T:Cadenza.Tuple{T}" /> instance.
            </summary>
            <param name="item1">
              A <typeparamref name="T"/> which is used to initialize the <see cref="P:Cadenza.Tuple{T}.Item1" /> property.
            </param>
            <remarks>
              <para>
                Constructs and initializes a new <see cref="T:Cadenza.Tuple{T}" /> instance.
              </para>
            </remarks>
        </member>
        <member name="M:Cadenza.Tuple`1.Equals(System.Object)">
            <param name="obj">
              A <see cref="T:System.Object"/> to compare this instance against.
            </param>
            <summary>
              Determines whether the current instance and the specified object have the same value.
            </summary>
            <returns>
              <para>
               <see langword="true"/> if <paramref name="obj"/> is a
               <see cref="T:Cadenza.Tuple{T}" /> and each member of <paramref name="obj"/>
               and the current instance have the same value (according to
               <see cref="M:System.Collections.Generic.EqualityComparer{T}.Equals(`0,`0)" />); otherwise
               <see langword="false"/> is returned.
              </para>
            </returns>
            <remarks>
              <para>
               This method checks for value equality
               (<see cref="M:System.Collections.Generic.EqualityComparer{T}.Equals(`0,`0)" />), as defined by each
               value type.
              </para>
              <para>
               <block subset="none" type="note">
                This method overrides <see cref="M:System.Object.Equals(System.Object)"/>.
               </block>
              </para>
            </remarks>
        </member>
        <member name="M:Cadenza.Tuple`1.GetHashCode">
            <summary>
              Generates a hash code for the current instance.
            </summary>
            <returns>
              A <see cref="T:System.Int32"/> containing the hash code for this instance.
            </returns>
            <remarks>
              <para>
               <block subset="none" type="note">
                This method overrides <see cref="M:System.Object.GetHashCode"/>.
               </block>
              </para>
            </remarks>
        </member>
        <member name="M:Cadenza.Tuple`1.ToString">
            <summary>
              Returns a <see cref="T:System.String"/> representation of the value of the current instance.
            </summary>
            <returns>
              A <see cref="T:System.String"/> representation of the value of the current instance.
            </returns>
            <remarks>
              <para>
               <block subset="none" type="behaviors">
                Returns <c>(</c>, followed by a comma-separated list of the result of
                calling <see cref="M:System.Object.ToString"/> on
              <see cref="P:Cadenza.Tuple{T}.Item1" />, 
                followed by <c>)</c>.
               </block>
              </para>
            </remarks>
        </member>
        <member name="P:Cadenza.Tuple`1.Item1">
            <summary>
              The first tuple value.
            </summary>
            <value>
              A <typeparamref name="T" /> which is the first tuple value.
            </value>
            <remarks>
              The first tuple value.
            </remarks>
        </member>
        <member name="T:Cadenza.Tuple`2">
            <typeparam name="T1">
              The first value type.
            </typeparam>
            <typeparam name="T2">
              The second value type.
            </typeparam>
            <summary>
              A strongly-typed sequence of 2 variously typed values.
            </summary>
            <remarks>
              <para>
               A <c>Tuple</c> is an immutable, strongly typed sequence of variously
               typed values with each value lacking an otherwise meaningful name aside
               from its position.
              </para>
            </remarks>
        </member>
        <member name="M:Cadenza.Tuple`2.#ctor(`0,`1)">
            <summary>
              Constructs and initializes a new <see cref="T:Cadenza.Tuple{T1,T2}" /> instance.
            </summary>
            <param name="item1">
              A <typeparamref name="T1"/> which is used to initialize the <see cref="P:Cadenza.Tuple{T1,T2}.Item1" /> property.
            </param>
            <param name="item2">
              A <typeparamref name="T2"/> which is used to initialize the <see cref="P:Cadenza.Tuple{T1,T2}.Item2" /> property.
            </param>
            <remarks>
              <para>
                Constructs and initializes a new <see cref="T:Cadenza.Tuple{T1,T2}" /> instance.
              </para>
            </remarks>
        </member>
        <member name="M:Cadenza.Tuple`2.Equals(System.Object)">
            <param name="obj">
              A <see cref="T:System.Object"/> to compare this instance against.
            </param>
            <summary>
              Determines whether the current instance and the specified object have the same value.
            </summary>
            <returns>
              <para>
               <see langword="true"/> if <paramref name="obj"/> is a
               <see cref="T:Cadenza.Tuple{T1,T2}" /> and each member of <paramref name="obj"/>
               and the current instance have the same value (according to
               <see cref="M:System.Collections.Generic.EqualityComparer{T}.Equals(`0,`0)" />); otherwise
               <see langword="false"/> is returned.
              </para>
            </returns>
            <remarks>
              <para>
               This method checks for value equality
               (<see cref="M:System.Collections.Generic.EqualityComparer{T}.Equals(`0,`0)" />), as defined by each
               value type.
              </para>
              <para>
               <block subset="none" type="note">
                This method overrides <see cref="M:System.Object.Equals(System.Object)"/>.
               </block>
              </para>
            </remarks>
        </member>
        <member name="M:Cadenza.Tuple`2.GetHashCode">
            <summary>
              Generates a hash code for the current instance.
            </summary>
            <returns>
              A <see cref="T:System.Int32"/> containing the hash code for this instance.
            </returns>
            <remarks>
              <para>
               <block subset="none" type="note">
                This method overrides <see cref="M:System.Object.GetHashCode"/>.
               </block>
              </para>
            </remarks>
        </member>
        <member name="M:Cadenza.Tuple`2.ToString">
            <summary>
              Returns a <see cref="T:System.String"/> representation of the value of the current instance.
            </summary>
            <returns>
              A <see cref="T:System.String"/> representation of the value of the current instance.
            </returns>
            <remarks>
              <para>
               <block subset="none" type="behaviors">
                Returns <c>(</c>, followed by a comma-separated list of the result of
                calling <see cref="M:System.Object.ToString"/> on
              <see cref="P:Cadenza.Tuple{T1,T2}.Item1" />, 
              <see cref="P:Cadenza.Tuple{T1,T2}.Item2" />, 
                followed by <c>)</c>.
               </block>
              </para>
            </remarks>
        </member>
        <member name="P:Cadenza.Tuple`2.Item1">
            <summary>
              The first tuple value.
            </summary>
            <value>
              A <typeparamref name="T1" /> which is the first tuple value.
            </value>
            <remarks>
              The first tuple value.
            </remarks>
        </member>
        <member name="P:Cadenza.Tuple`2.Item2">
            <summary>
              The second tuple value.
            </summary>
            <value>
              A <typeparamref name="T2" /> which is the second tuple value.
            </value>
            <remarks>
              The second tuple value.
            </remarks>
        </member>
        <member name="T:Cadenza.Tuple`3">
            <typeparam name="T1">
              The first value type.
            </typeparam>
            <typeparam name="T2">
              The second value type.
            </typeparam>
            <typeparam name="T3">
              The third value type.
            </typeparam>
            <summary>
              A strongly-typed sequence of 3 variously typed values.
            </summary>
            <remarks>
              <para>
               A <c>Tuple</c> is an immutable, strongly typed sequence of variously
               typed values with each value lacking an otherwise meaningful name aside
               from its position.
              </para>
            </remarks>
        </member>
        <member name="M:Cadenza.Tuple`3.#ctor(`0,`1,`2)">
            <summary>
              Constructs and initializes a new <see cref="T:Cadenza.Tuple{T1,T2,T3}" /> instance.
            </summary>
            <param name="item1">
              A <typeparamref name="T1"/> which is used to initialize the <see cref="P:Cadenza.Tuple{T1,T2,T3}.Item1" /> property.
            </param>
            <param name="item2">
              A <typeparamref name="T2"/> which is used to initialize the <see cref="P:Cadenza.Tuple{T1,T2,T3}.Item2" /> property.
            </param>
            <param name="item3">
              A <typeparamref name="T3"/> which is used to initialize the <see cref="P:Cadenza.Tuple{T1,T2,T3}.Item3" /> property.
            </param>
            <remarks>
              <para>
                Constructs and initializes a new <see cref="T:Cadenza.Tuple{T1,T2,T3}" /> instance.
              </para>
            </remarks>
        </member>
        <member name="M:Cadenza.Tuple`3.Equals(System.Object)">
            <param name="obj">
              A <see cref="T:System.Object"/> to compare this instance against.
            </param>
            <summary>
              Determines whether the current instance and the specified object have the same value.
            </summary>
            <returns>
              <para>
               <see langword="true"/> if <paramref name="obj"/> is a
               <see cref="T:Cadenza.Tuple{T1,T2,T3}" /> and each member of <paramref name="obj"/>
               and the current instance have the same value (according to
               <see cref="M:System.Collections.Generic.EqualityComparer{T}.Equals(`0,`0)" />); otherwise
               <see langword="false"/> is returned.
              </para>
            </returns>
            <remarks>
              <para>
               This method checks for value equality
               (<see cref="M:System.Collections.Generic.EqualityComparer{T}.Equals(`0,`0)" />), as defined by each
               value type.
              </para>
              <para>
               <block subset="none" type="note">
                This method overrides <see cref="M:System.Object.Equals(System.Object)"/>.
               </block>
              </para>
            </remarks>
        </member>
        <member name="M:Cadenza.Tuple`3.GetHashCode">
            <summary>
              Generates a hash code for the current instance.
            </summary>
            <returns>
              A <see cref="T:System.Int32"/> containing the hash code for this instance.
            </returns>
            <remarks>
              <para>
               <block subset="none" type="note">
                This method overrides <see cref="M:System.Object.GetHashCode"/>.
               </block>
              </para>
            </remarks>
        </member>
        <member name="M:Cadenza.Tuple`3.ToString">
            <summary>
              Returns a <see cref="T:System.String"/> representation of the value of the current instance.
            </summary>
            <returns>
              A <see cref="T:System.String"/> representation of the value of the current instance.
            </returns>
            <remarks>
              <para>
               <block subset="none" type="behaviors">
                Returns <c>(</c>, followed by a comma-separated list of the result of
                calling <see cref="M:System.Object.ToString"/> on
              <see cref="P:Cadenza.Tuple{T1,T2,T3}.Item1" />, 
              <see cref="P:Cadenza.Tuple{T1,T2,T3}.Item2" />, 
              <see cref="P:Cadenza.Tuple{T1,T2,T3}.Item3" />, 
                followed by <c>)</c>.
               </block>
              </para>
            </remarks>
        </member>
        <member name="P:Cadenza.Tuple`3.Item1">
            <summary>
              The first tuple value.
            </summary>
            <value>
              A <typeparamref name="T1" /> which is the first tuple value.
            </value>
            <remarks>
              The first tuple value.
            </remarks>
        </member>
        <member name="P:Cadenza.Tuple`3.Item2">
            <summary>
              The second tuple value.
            </summary>
            <value>
              A <typeparamref name="T2" /> which is the second tuple value.
            </value>
            <remarks>
              The second tuple value.
            </remarks>
        </member>
        <member name="P:Cadenza.Tuple`3.Item3">
            <summary>
              The third tuple value.
            </summary>
            <value>
              A <typeparamref name="T3" /> which is the third tuple value.
            </value>
            <remarks>
              The third tuple value.
            </remarks>
        </member>
        <member name="T:Cadenza.Tuple`4">
            <typeparam name="T1">
              The first value type.
            </typeparam>
            <typeparam name="T2">
              The second value type.
            </typeparam>
            <typeparam name="T3">
              The third value type.
            </typeparam>
            <typeparam name="T4">
              The fourth value type.
            </typeparam>
            <summary>
              A strongly-typed sequence of 4 variously typed values.
            </summary>
            <remarks>
              <para>
               A <c>Tuple</c> is an immutable, strongly typed sequence of variously
               typed values with each value lacking an otherwise meaningful name aside
               from its position.
              </para>
            </remarks>
        </member>
        <member name="M:Cadenza.Tuple`4.#ctor(`0,`1,`2,`3)">
            <summary>
              Constructs and initializes a new <see cref="T:Cadenza.Tuple{T1,T2,T3,T4}" /> instance.
            </summary>
            <param name="item1">
              A <typeparamref name="T1"/> which is used to initialize the <see cref="P:Cadenza.Tuple{T1,T2,T3,T4}.Item1" /> property.
            </param>
            <param name="item2">
              A <typeparamref name="T2"/> which is used to initialize the <see cref="P:Cadenza.Tuple{T1,T2,T3,T4}.Item2" /> property.
            </param>
            <param name="item3">
              A <typeparamref name="T3"/> which is used to initialize the <see cref="P:Cadenza.Tuple{T1,T2,T3,T4}.Item3" /> property.
            </param>
            <param name="item4">
              A <typeparamref name="T4"/> which is used to initialize the <see cref="P:Cadenza.Tuple{T1,T2,T3,T4}.Item4" /> property.
            </param>
            <remarks>
              <para>
                Constructs and initializes a new <see cref="T:Cadenza.Tuple{T1,T2,T3,T4}" /> instance.
              </para>
            </remarks>
        </member>
        <member name="M:Cadenza.Tuple`4.Equals(System.Object)">
            <param name="obj">
              A <see cref="T:System.Object"/> to compare this instance against.
            </param>
            <summary>
              Determines whether the current instance and the specified object have the same value.
            </summary>
            <returns>
              <para>
               <see langword="true"/> if <paramref name="obj"/> is a
               <see cref="T:Cadenza.Tuple{T1,T2,T3,T4}" /> and each member of <paramref name="obj"/>
               and the current instance have the same value (according to
               <see cref="M:System.Collections.Generic.EqualityComparer{T}.Equals(`0,`0)" />); otherwise
               <see langword="false"/> is returned.
              </para>
            </returns>
            <remarks>
              <para>
               This method checks for value equality
               (<see cref="M:System.Collections.Generic.EqualityComparer{T}.Equals(`0,`0)" />), as defined by each
               value type.
              </para>
              <para>
               <block subset="none" type="note">
                This method overrides <see cref="M:System.Object.Equals(System.Object)"/>.
               </block>
              </para>
            </remarks>
        </member>
        <member name="M:Cadenza.Tuple`4.GetHashCode">
            <summary>
              Generates a hash code for the current instance.
            </summary>
            <returns>
              A <see cref="T:System.Int32"/> containing the hash code for this instance.
            </returns>
            <remarks>
              <para>
               <block subset="none" type="note">
                This method overrides <see cref="M:System.Object.GetHashCode"/>.
               </block>
              </para>
            </remarks>
        </member>
        <member name="M:Cadenza.Tuple`4.ToString">
            <summary>
              Returns a <see cref="T:System.String"/> representation of the value of the current instance.
            </summary>
            <returns>
              A <see cref="T:System.String"/> representation of the value of the current instance.
            </returns>
            <remarks>
              <para>
               <block subset="none" type="behaviors">
                Returns <c>(</c>, followed by a comma-separated list of the result of
                calling <see cref="M:System.Object.ToString"/> on
              <see cref="P:Cadenza.Tuple{T1,T2,T3,T4}.Item1" />, 
              <see cref="P:Cadenza.Tuple{T1,T2,T3,T4}.Item2" />, 
              <see cref="P:Cadenza.Tuple{T1,T2,T3,T4}.Item3" />, 
              <see cref="P:Cadenza.Tuple{T1,T2,T3,T4}.Item4" />, 
                followed by <c>)</c>.
               </block>
              </para>
            </remarks>
        </member>
        <member name="P:Cadenza.Tuple`4.Item1">
            <summary>
              The first tuple value.
            </summary>
            <value>
              A <typeparamref name="T1" /> which is the first tuple value.
            </value>
            <remarks>
              The first tuple value.
            </remarks>
        </member>
        <member name="P:Cadenza.Tuple`4.Item2">
            <summary>
              The second tuple value.
            </summary>
            <value>
              A <typeparamref name="T2" /> which is the second tuple value.
            </value>
            <remarks>
              The second tuple value.
            </remarks>
        </member>
        <member name="P:Cadenza.Tuple`4.Item3">
            <summary>
              The third tuple value.
            </summary>
            <value>
              A <typeparamref name="T3" /> which is the third tuple value.
            </value>
            <remarks>
              The third tuple value.
            </remarks>
        </member>
        <member name="P:Cadenza.Tuple`4.Item4">
            <summary>
              The fourth tuple value.
            </summary>
            <value>
              A <typeparamref name="T4" /> which is the fourth tuple value.
            </value>
            <remarks>
              The fourth tuple value.
            </remarks>
        </member>
        <member name="T:Cadenza.TupleCoda">
            <summary>
              Extension methods on <c>Tuple</c> types.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Cadenza.TupleCoda.Aggregate``2(Cadenza.Tuple{``0},System.Func{``0,``1})">
            <typeparam name="T">
              The first value type.
            </typeparam>
            <typeparam name="TResult">
              The return value type.
            </typeparam>
            <param name="self">
              A <see cref="T:Cadenza.Tuple{T}" /> to aggregate the values of.
            </param>
            <param name="func">
              A <see cref="T:System.Func{T,TResult}" /> which will be invoked, providing the values
              <see cref="P:Cadenza.Tuple`1.Item1"/>
              to <paramref name="func"/> and 
              returning the value returned by <paramref name="func"/>.
            </param>
            <summary>
              Converts the <see cref="T:Cadenza.Tuple{T}" /> into a <typeparamref name="TResult"/>.
            </summary>
            <returns>
              The <typeparamref name="TResult"/> returned by <paramref name="func"/>.
            </returns>
            <remarks>
              <para>
               <block subset="none" type="behaviors">
                Passes the values <see cref="P:Cadenza.Tuple`1.Item1"/> to 
                <paramref name="func"/>, returning the value produced by 
                <paramref name="func"/>.
               </block>
              </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              <para>
                <paramref name="self" /> is <see langword="null" />.
              </para>
              <para>-or-</para>
              <para>
                <paramref name="func" /> is <see langword="null" />.
              </para>
            </exception>
        </member>
        <member name="M:Cadenza.TupleCoda.Match``2(Cadenza.Tuple{``0},System.Func{``0,Cadenza.Maybe{``1}}[])">
            <typeparam name="T">
              The first value type.
            </typeparam>
            <typeparam name="TResult">
              The return value type.
            </typeparam>
            <param name="self">
              A <see cref="T:Cadenza.Tuple{T}" /> to match against.
            </param>
            <param name="matchers">
              A <see cref="T:System.Func{T,Cadenza.Maybe{TResult}}" />
              array containing the conversion routines to use to convert 
              the current <see cref="T:Cadenza.Tuple{T}" /> instance into a 
              <typeparamref name="TResult" /> value.
            </param>
            <summary>
              Converts the current <see cref="T:Cadenza.Tuple{T}" /> instance into a <typeparamref name="TResult"/>.
            </summary>
            <returns>
              The <typeparamref name="TResult"/> returned by one of the <paramref name="matchers"/>.
            </returns>
            <remarks>
              <para>
               <block subset="none" type="behaviors">
                <para>
                 The current <see cref="T:Cadenza.Tuple{T}" /> instance is converted into a 
                 <typeparamref name="TResult" /> instance by trying each
                 <see cref="T:System.Func{T,Cadenza.Maybe{TResult}}" />
                 within <paramref name="matchers" />.
                </para>
                <para>
                 This method returns 
                 <see cref="P:Cadenza.Maybe{TResult}.Value" /> 
                 for the first delegate to return a
                 <see cref="T:Cadenza.Maybe{TResult}" /> instance
                 where <see cref="P:Cadenza.Maybe{TResult}.HasValue" />
                 is <see langword="true" />.
                </para>
                <para>
                 If no <see cref="T:System.Func{T,Cadenza.Maybe{TResult}}" />
                 returns a 
                 <see cref="T:Cadenza.Maybe{TResult}" /> instance
                 where <see cref="P:Cadenza.Maybe{TResult}.HasValue" />
                 is <see langword="true" />, then an
                 <see cref="T:System.InvalidOperationException" /> is thrown.
                </para>
               </block>
               <code lang="C#">
              var    a = Tuple.Create (1, 2);
              string b = a.Match (
                  (t, v) =&gt; Match.When ( t + v == 3, "foo!"),
                  (t, v) =&gt; "*default*".Just ());
              Console.WriteLine (b);  // prints "foo!"</code>
              </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              <para>
                <paramref name="self" /> is <see langword="null" />.
              </para>
              <para>-or-</para>
              <para>
                <paramref name="matchers" /> is <see langword="null" />.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
              None of the 
              <see cref="T:System.Func{TSource,Cadenza.Maybe{TResult}}" />
              delegates within <paramref name="matchers" /> returned a 
              <see cref="T:Cadenza.Maybe{TResult}" /> instance where
              <see cref="P:Cadenza.Maybe{TResult}.HasValue" /> was
              <see langword="true" />.
            </exception>
        </member>
        <member name="M:Cadenza.TupleCoda.ToEnumerable``1(Cadenza.Tuple{``0})">
            <typeparam name="T">
              The first value type.
            </typeparam>
            <param name="self">
              A <see cref="T:Cadenza.Tuple{T}" /> to convert into an <see cref="T:System.Collections.Generic.IEnumerable{System.Object}"/>.
            </param>
            <summary>
              Converts the <see cref="T:Cadenza.Tuple{T}" /> into a <see cref="T:System.Collections.Generic.IEnumerable{System.Object}"/>.
            </summary>
            <returns>
              A <see cref="T:System.Collections.Generic.IEnumerable{System.Object}"/>.
            </returns>
            <remarks>
              <para>
               <block subset="none" type="behaviors">
                Passes the values <see cref="P:Cadenza.Tuple`1.Item1"/> to 
                <paramref name="func"/>, returning the value produced by 
                <paramref name="func"/>.
               </block>
              </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.TupleCoda.Aggregate``3(Cadenza.Tuple{``0,``1},System.Func{``0,``1,``2})">
            <typeparam name="T1">
              The first value type.
            </typeparam>
            <typeparam name="T2">
              The second value type.
            </typeparam>
            <typeparam name="TResult">
              The return value type.
            </typeparam>
            <param name="self">
              A <see cref="T:Cadenza.Tuple{T1,T2}" /> to aggregate the values of.
            </param>
            <param name="func">
              A <see cref="T:System.Func{T1,T2,TResult}" /> which will be invoked, providing the values
              <see cref="P:Cadenza.Tuple`2.Item1"/>, <see cref="P:Cadenza.Tuple`2.Item2"/>
              to <paramref name="func"/> and 
              returning the value returned by <paramref name="func"/>.
            </param>
            <summary>
              Converts the <see cref="T:Cadenza.Tuple{T1,T2}" /> into a <typeparamref name="TResult"/>.
            </summary>
            <returns>
              The <typeparamref name="TResult"/> returned by <paramref name="func"/>.
            </returns>
            <remarks>
              <para>
               <block subset="none" type="behaviors">
                Passes the values <see cref="P:Cadenza.Tuple`2.Item1"/>, <see cref="P:Cadenza.Tuple`2.Item2"/> to 
                <paramref name="func"/>, returning the value produced by 
                <paramref name="func"/>.
               </block>
              </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              <para>
                <paramref name="self" /> is <see langword="null" />.
              </para>
              <para>-or-</para>
              <para>
                <paramref name="func" /> is <see langword="null" />.
              </para>
            </exception>
        </member>
        <member name="M:Cadenza.TupleCoda.Match``3(Cadenza.Tuple{``0,``1},System.Func{``0,``1,Cadenza.Maybe{``2}}[])">
            <typeparam name="T1">
              The first value type.
            </typeparam>
            <typeparam name="T2">
              The second value type.
            </typeparam>
            <typeparam name="TResult">
              The return value type.
            </typeparam>
            <param name="self">
              A <see cref="T:Cadenza.Tuple{T1,T2}" /> to match against.
            </param>
            <param name="matchers">
              A <see cref="T:System.Func{T1,T2,Cadenza.Maybe{TResult}}" />
              array containing the conversion routines to use to convert 
              the current <see cref="T:Cadenza.Tuple{T1,T2}" /> instance into a 
              <typeparamref name="TResult" /> value.
            </param>
            <summary>
              Converts the current <see cref="T:Cadenza.Tuple{T1,T2}" /> instance into a <typeparamref name="TResult"/>.
            </summary>
            <returns>
              The <typeparamref name="TResult"/> returned by one of the <paramref name="matchers"/>.
            </returns>
            <remarks>
              <para>
               <block subset="none" type="behaviors">
                <para>
                 The current <see cref="T:Cadenza.Tuple{T1,T2}" /> instance is converted into a 
                 <typeparamref name="TResult" /> instance by trying each
                 <see cref="T:System.Func{T1,T2,Cadenza.Maybe{TResult}}" />
                 within <paramref name="matchers" />.
                </para>
                <para>
                 This method returns 
                 <see cref="P:Cadenza.Maybe{TResult}.Value" /> 
                 for the first delegate to return a
                 <see cref="T:Cadenza.Maybe{TResult}" /> instance
                 where <see cref="P:Cadenza.Maybe{TResult}.HasValue" />
                 is <see langword="true" />.
                </para>
                <para>
                 If no <see cref="T:System.Func{T1,T2,Cadenza.Maybe{TResult}}" />
                 returns a 
                 <see cref="T:Cadenza.Maybe{TResult}" /> instance
                 where <see cref="P:Cadenza.Maybe{TResult}.HasValue" />
                 is <see langword="true" />, then an
                 <see cref="T:System.InvalidOperationException" /> is thrown.
                </para>
               </block>
               <code lang="C#">
              var    a = Tuple.Create (1, 2);
              string b = a.Match (
                  (t, v) =&gt; Match.When ( t + v == 3, "foo!"),
                  (t, v) =&gt; "*default*".Just ());
              Console.WriteLine (b);  // prints "foo!"</code>
              </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              <para>
                <paramref name="self" /> is <see langword="null" />.
              </para>
              <para>-or-</para>
              <para>
                <paramref name="matchers" /> is <see langword="null" />.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
              None of the 
              <see cref="T:System.Func{TSource,Cadenza.Maybe{TResult}}" />
              delegates within <paramref name="matchers" /> returned a 
              <see cref="T:Cadenza.Maybe{TResult}" /> instance where
              <see cref="P:Cadenza.Maybe{TResult}.HasValue" /> was
              <see langword="true" />.
            </exception>
        </member>
        <member name="M:Cadenza.TupleCoda.ToEnumerable``2(Cadenza.Tuple{``0,``1})">
            <typeparam name="T1">
              The first value type.
            </typeparam>
            <typeparam name="T2">
              The second value type.
            </typeparam>
            <param name="self">
              A <see cref="T:Cadenza.Tuple{T1,T2}" /> to convert into an <see cref="T:System.Collections.Generic.IEnumerable{System.Object}"/>.
            </param>
            <summary>
              Converts the <see cref="T:Cadenza.Tuple{T1,T2}" /> into a <see cref="T:System.Collections.Generic.IEnumerable{System.Object}"/>.
            </summary>
            <returns>
              A <see cref="T:System.Collections.Generic.IEnumerable{System.Object}"/>.
            </returns>
            <remarks>
              <para>
               <block subset="none" type="behaviors">
                Passes the values <see cref="P:Cadenza.Tuple`2.Item1"/>, <see cref="P:Cadenza.Tuple`2.Item2"/> to 
                <paramref name="func"/>, returning the value produced by 
                <paramref name="func"/>.
               </block>
              </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.TupleCoda.Aggregate``4(Cadenza.Tuple{``0,``1,``2},System.Func{``0,``1,``2,``3})">
            <typeparam name="T1">
              The first value type.
            </typeparam>
            <typeparam name="T2">
              The second value type.
            </typeparam>
            <typeparam name="T3">
              The third value type.
            </typeparam>
            <typeparam name="TResult">
              The return value type.
            </typeparam>
            <param name="self">
              A <see cref="T:Cadenza.Tuple{T1,T2,T3}" /> to aggregate the values of.
            </param>
            <param name="func">
              A <see cref="T:System.Func{T1,T2,T3,TResult}" /> which will be invoked, providing the values
              <see cref="P:Cadenza.Tuple`3.Item1"/>, <see cref="P:Cadenza.Tuple`3.Item2"/>, <see cref="P:Cadenza.Tuple`3.Item3"/>
              to <paramref name="func"/> and 
              returning the value returned by <paramref name="func"/>.
            </param>
            <summary>
              Converts the <see cref="T:Cadenza.Tuple{T1,T2,T3}" /> into a <typeparamref name="TResult"/>.
            </summary>
            <returns>
              The <typeparamref name="TResult"/> returned by <paramref name="func"/>.
            </returns>
            <remarks>
              <para>
               <block subset="none" type="behaviors">
                Passes the values <see cref="P:Cadenza.Tuple`3.Item1"/>, <see cref="P:Cadenza.Tuple`3.Item2"/>, <see cref="P:Cadenza.Tuple`3.Item3"/> to 
                <paramref name="func"/>, returning the value produced by 
                <paramref name="func"/>.
               </block>
              </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              <para>
                <paramref name="self" /> is <see langword="null" />.
              </para>
              <para>-or-</para>
              <para>
                <paramref name="func" /> is <see langword="null" />.
              </para>
            </exception>
        </member>
        <member name="M:Cadenza.TupleCoda.Match``4(Cadenza.Tuple{``0,``1,``2},System.Func{``0,``1,``2,Cadenza.Maybe{``3}}[])">
            <typeparam name="T1">
              The first value type.
            </typeparam>
            <typeparam name="T2">
              The second value type.
            </typeparam>
            <typeparam name="T3">
              The third value type.
            </typeparam>
            <typeparam name="TResult">
              The return value type.
            </typeparam>
            <param name="self">
              A <see cref="T:Cadenza.Tuple{T1,T2,T3}" /> to match against.
            </param>
            <param name="matchers">
              A <see cref="T:System.Func{T1,T2,T3,Cadenza.Maybe{TResult}}" />
              array containing the conversion routines to use to convert 
              the current <see cref="T:Cadenza.Tuple{T1,T2,T3}" /> instance into a 
              <typeparamref name="TResult" /> value.
            </param>
            <summary>
              Converts the current <see cref="T:Cadenza.Tuple{T1,T2,T3}" /> instance into a <typeparamref name="TResult"/>.
            </summary>
            <returns>
              The <typeparamref name="TResult"/> returned by one of the <paramref name="matchers"/>.
            </returns>
            <remarks>
              <para>
               <block subset="none" type="behaviors">
                <para>
                 The current <see cref="T:Cadenza.Tuple{T1,T2,T3}" /> instance is converted into a 
                 <typeparamref name="TResult" /> instance by trying each
                 <see cref="T:System.Func{T1,T2,T3,Cadenza.Maybe{TResult}}" />
                 within <paramref name="matchers" />.
                </para>
                <para>
                 This method returns 
                 <see cref="P:Cadenza.Maybe{TResult}.Value" /> 
                 for the first delegate to return a
                 <see cref="T:Cadenza.Maybe{TResult}" /> instance
                 where <see cref="P:Cadenza.Maybe{TResult}.HasValue" />
                 is <see langword="true" />.
                </para>
                <para>
                 If no <see cref="T:System.Func{T1,T2,T3,Cadenza.Maybe{TResult}}" />
                 returns a 
                 <see cref="T:Cadenza.Maybe{TResult}" /> instance
                 where <see cref="P:Cadenza.Maybe{TResult}.HasValue" />
                 is <see langword="true" />, then an
                 <see cref="T:System.InvalidOperationException" /> is thrown.
                </para>
               </block>
               <code lang="C#">
              var    a = Tuple.Create (1, 2);
              string b = a.Match (
                  (t, v) =&gt; Match.When ( t + v == 3, "foo!"),
                  (t, v) =&gt; "*default*".Just ());
              Console.WriteLine (b);  // prints "foo!"</code>
              </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              <para>
                <paramref name="self" /> is <see langword="null" />.
              </para>
              <para>-or-</para>
              <para>
                <paramref name="matchers" /> is <see langword="null" />.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
              None of the 
              <see cref="T:System.Func{TSource,Cadenza.Maybe{TResult}}" />
              delegates within <paramref name="matchers" /> returned a 
              <see cref="T:Cadenza.Maybe{TResult}" /> instance where
              <see cref="P:Cadenza.Maybe{TResult}.HasValue" /> was
              <see langword="true" />.
            </exception>
        </member>
        <member name="M:Cadenza.TupleCoda.ToEnumerable``3(Cadenza.Tuple{``0,``1,``2})">
            <typeparam name="T1">
              The first value type.
            </typeparam>
            <typeparam name="T2">
              The second value type.
            </typeparam>
            <typeparam name="T3">
              The third value type.
            </typeparam>
            <param name="self">
              A <see cref="T:Cadenza.Tuple{T1,T2,T3}" /> to convert into an <see cref="T:System.Collections.Generic.IEnumerable{System.Object}"/>.
            </param>
            <summary>
              Converts the <see cref="T:Cadenza.Tuple{T1,T2,T3}" /> into a <see cref="T:System.Collections.Generic.IEnumerable{System.Object}"/>.
            </summary>
            <returns>
              A <see cref="T:System.Collections.Generic.IEnumerable{System.Object}"/>.
            </returns>
            <remarks>
              <para>
               <block subset="none" type="behaviors">
                Passes the values <see cref="P:Cadenza.Tuple`3.Item1"/>, <see cref="P:Cadenza.Tuple`3.Item2"/>, <see cref="P:Cadenza.Tuple`3.Item3"/> to 
                <paramref name="func"/>, returning the value produced by 
                <paramref name="func"/>.
               </block>
              </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Cadenza.TupleCoda.Aggregate``5(Cadenza.Tuple{``0,``1,``2,``3},System.Func{``0,``1,``2,``3,``4})">
            <typeparam name="T1">
              The first value type.
            </typeparam>
            <typeparam name="T2">
              The second value type.
            </typeparam>
            <typeparam name="T3">
              The third value type.
            </typeparam>
            <typeparam name="T4">
              The fourth value type.
            </typeparam>
            <typeparam name="TResult">
              The return value type.
            </typeparam>
            <param name="self">
              A <see cref="T:Cadenza.Tuple{T1,T2,T3,T4}" /> to aggregate the values of.
            </param>
            <param name="func">
              A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> which will be invoked, providing the values
              <see cref="P:Cadenza.Tuple`4.Item1"/>, <see cref="P:Cadenza.Tuple`4.Item2"/>, <see cref="P:Cadenza.Tuple`4.Item3"/>, <see cref="P:Cadenza.Tuple`4.Item4"/>
              to <paramref name="func"/> and 
              returning the value returned by <paramref name="func"/>.
            </param>
            <summary>
              Converts the <see cref="T:Cadenza.Tuple{T1,T2,T3,T4}" /> into a <typeparamref name="TResult"/>.
            </summary>
            <returns>
              The <typeparamref name="TResult"/> returned by <paramref name="func"/>.
            </returns>
            <remarks>
              <para>
               <block subset="none" type="behaviors">
                Passes the values <see cref="P:Cadenza.Tuple`4.Item1"/>, <see cref="P:Cadenza.Tuple`4.Item2"/>, <see cref="P:Cadenza.Tuple`4.Item3"/>, <see cref="P:Cadenza.Tuple`4.Item4"/> to 
                <paramref name="func"/>, returning the value produced by 
                <paramref name="func"/>.
               </block>
              </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              <para>
                <paramref name="self" /> is <see langword="null" />.
              </para>
              <para>-or-</para>
              <para>
                <paramref name="func" /> is <see langword="null" />.
              </para>
            </exception>
        </member>
        <member name="M:Cadenza.TupleCoda.Match``5(Cadenza.Tuple{``0,``1,``2,``3},System.Func{``0,``1,``2,``3,Cadenza.Maybe{``4}}[])">
            <typeparam name="T1">
              The first value type.
            </typeparam>
            <typeparam name="T2">
              The second value type.
            </typeparam>
            <typeparam name="T3">
              The third value type.
            </typeparam>
            <typeparam name="T4">
              The fourth value type.
            </typeparam>
            <typeparam name="TResult">
              The return value type.
            </typeparam>
            <param name="self">
              A <see cref="T:Cadenza.Tuple{T1,T2,T3,T4}" /> to match against.
            </param>
            <param name="matchers">
              A <see cref="T:System.Func{T1,T2,T3,T4,Cadenza.Maybe{TResult}}" />
              array containing the conversion routines to use to convert 
              the current <see cref="T:Cadenza.Tuple{T1,T2,T3,T4}" /> instance into a 
              <typeparamref name="TResult" /> value.
            </param>
            <summary>
              Converts the current <see cref="T:Cadenza.Tuple{T1,T2,T3,T4}" /> instance into a <typeparamref name="TResult"/>.
            </summary>
            <returns>
              The <typeparamref name="TResult"/> returned by one of the <paramref name="matchers"/>.
            </returns>
            <remarks>
              <para>
               <block subset="none" type="behaviors">
                <para>
                 The current <see cref="T:Cadenza.Tuple{T1,T2,T3,T4}" /> instance is converted into a 
                 <typeparamref name="TResult" /> instance by trying each
                 <see cref="T:System.Func{T1,T2,T3,T4,Cadenza.Maybe{TResult}}" />
                 within <paramref name="matchers" />.
                </para>
                <para>
                 This method returns 
                 <see cref="P:Cadenza.Maybe{TResult}.Value" /> 
                 for the first delegate to return a
                 <see cref="T:Cadenza.Maybe{TResult}" /> instance
                 where <see cref="P:Cadenza.Maybe{TResult}.HasValue" />
                 is <see langword="true" />.
                </para>
                <para>
                 If no <see cref="T:System.Func{T1,T2,T3,T4,Cadenza.Maybe{TResult}}" />
                 returns a 
                 <see cref="T:Cadenza.Maybe{TResult}" /> instance
                 where <see cref="P:Cadenza.Maybe{TResult}.HasValue" />
                 is <see langword="true" />, then an
                 <see cref="T:System.InvalidOperationException" /> is thrown.
                </para>
               </block>
               <code lang="C#">
              var    a = Tuple.Create (1, 2);
              string b = a.Match (
                  (t, v) =&gt; Match.When ( t + v == 3, "foo!"),
                  (t, v) =&gt; "*default*".Just ());
              Console.WriteLine (b);  // prints "foo!"</code>
              </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              <para>
                <paramref name="self" /> is <see langword="null" />.
              </para>
              <para>-or-</para>
              <para>
                <paramref name="matchers" /> is <see langword="null" />.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
              None of the 
              <see cref="T:System.Func{TSource,Cadenza.Maybe{TResult}}" />
              delegates within <paramref name="matchers" /> returned a 
              <see cref="T:Cadenza.Maybe{TResult}" /> instance where
              <see cref="P:Cadenza.Maybe{TResult}.HasValue" /> was
              <see langword="true" />.
            </exception>
        </member>
        <member name="M:Cadenza.TupleCoda.ToEnumerable``4(Cadenza.Tuple{``0,``1,``2,``3})">
            <typeparam name="T1">
              The first value type.
            </typeparam>
            <typeparam name="T2">
              The second value type.
            </typeparam>
            <typeparam name="T3">
              The third value type.
            </typeparam>
            <typeparam name="T4">
              The fourth value type.
            </typeparam>
            <param name="self">
              A <see cref="T:Cadenza.Tuple{T1,T2,T3,T4}" /> to convert into an <see cref="T:System.Collections.Generic.IEnumerable{System.Object}"/>.
            </param>
            <summary>
              Converts the <see cref="T:Cadenza.Tuple{T1,T2,T3,T4}" /> into a <see cref="T:System.Collections.Generic.IEnumerable{System.Object}"/>.
            </summary>
            <returns>
              A <see cref="T:System.Collections.Generic.IEnumerable{System.Object}"/>.
            </returns>
            <remarks>
              <para>
               <block subset="none" type="behaviors">
                Passes the values <see cref="P:Cadenza.Tuple`4.Item1"/>, <see cref="P:Cadenza.Tuple`4.Item2"/>, <see cref="P:Cadenza.Tuple`4.Item3"/>, <see cref="P:Cadenza.Tuple`4.Item4"/> to 
                <paramref name="func"/>, returning the value produced by 
                <paramref name="func"/>.
               </block>
              </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="self"/> is <see langword="null" />.
            </exception>
        </member>
    </members>
</doc>
