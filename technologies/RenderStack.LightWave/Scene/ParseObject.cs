using System.Diagnostics;
using System.Collections.Generic;
using System.IO;

using RenderStack.Math;

using I1 = System.SByte;
using I2 = System.Int16;
using I4 = System.Int32;
using U1 = System.Byte;
using U2 = System.UInt16;
using U4 = System.UInt32;
using F4 = System.Single;
using S0 = System.String;
using VX = System.UInt32;
using COL4 = RenderStack.Math.Vector4;
using COL12 = RenderStack.Math.Vector3;
using VEC12 = RenderStack.Math.Vector3;
using FP4 = System.Single;
using ANG4 = System.Single;
using FNAM0 = System.String;

namespace RenderStack.LightWave
{
    public partial class LWSceneParser
    {
        /*  LoadObject  <object path + filename>  (Alternative: AddNullObject)

            example:      LoadObject Objects/Tutorial/LightBeam.lwo

            The LoadObject function is the first listing in all
            Object Segments. It provides LightWave with the path
            and filename for the object to be loaded. The object's
            path is generated by adding the current content directory
            to  the beginning of the given path and filename.  

            In this example if the current content directory were
            <c:/NewTek>, LightWave would attempt to load the file
            <c:/NewTek/Objects/Tutorial/LightBeam.lwo>.

            It is possible to have duplicate objects in a scene
            file. When the LoadObject function is called, and
            the object name already exists, a numbered suffix is 
            added to the duplicate object's name. This number is
            enclosed in parenthesis and follows the object name.  

            For example:  LightBeam.lwo (2) is the second instance
            of the LightBeam.lwo object in the current scene file.

            The added suffix is not saved in the scene file, and
            is used only as a user reference.

            User Interface:

            The LoadObject/AddNullObject listing is produced from
            the following functions on the Objects Panel; LoadObject,
            Load from Scene, and Add Null Object.

            The LoadObject/AddNullObject function is listed with all objects.
        */
        void LoadObjectLayer()
        {
            int     layer   = file.read_int   ();
            string  name    = file.read_string();

            Debug.WriteLine("LoadObjectLayer " + layer + " " + name);

            currentObject = new LWSObject();
            currentObject.Name  = name;
            currentObject.Layer = layer;
            scene.Objects.Add(currentObject);
        }

        /*  Alternative:  AddNullObject NullObject

            Alternative example:      AddNullObject NullObject

            The AddNullObject function will create a null object
            named "NullObject" in the current scene. NullObjects
            are treated as a normal object in the scene file.

            User Interface:

            The LoadObject/AddNullObject listing is produced from the 
            following functions on the Objects Panel; LoadObject,
            Load from Scene, and Add Null Object.

            The LoadObject/AddNullObject function is listed with all objects.
        */
        void AddNullObject()
        {
            string name = file.read_string();
            currentItem = new LWItem();
            currentItem.Name = name;
            scene.Objects.Add(currentObject);
        }

        void LoadObject()
        {
            throw new System.NotImplementedException();
        }

        /*  ShowObject nvisibility ncolor

            Determines how the object is displayed in the interface.
            The visibility codes are

            0 - hidden
            1 - bounding box
            2 - vertices only
            3 - wireframe
            4 - front face wireframe
            5 - shaded solid
            6 - textured shaded solid

            The color used to draw bounding boxes, vertices and wireframes
            can be one of the following.

            0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 

            The default visibility and color are stored in the config file.
            If they haven't been altered by the user, they are textured
            shaded solid (6) and cyan (3) in LightWave 6.5.
        */
        void ShowObject()
        {
            currentObject.Visibility = (LWItem.ItemVisibility)file.read_int();
            currentObject.WireColor = file.read_int();
        }

        /*  ObjectMotion
            NumChannels nchannels
            Channel nindex
            { Envelope ... 

            The ObjectMotion keyword signals the start of the motion
            information for the object. Motions are stored in envelopes,
            one for each motion channel. There are 9 standard channels,
            numbered from 0 to 8.

            0, 1, 2 - (x, y, z) position
            3, 4, 5 - (heading, pitch, bank) rotation
            6, 7, 8 - (sx, sy, sz) scale factors along each axis

            The values of all of these are relative to the object's parent,
            if it has one.
        */
        void ObjectMotion()
        {
            currentMotion = new LWMotion();
            currentObject.Motion = currentMotion;
        }

        void UseBonesFrom()
        {
            currentObject.UseBonesFrom = file.read_int();
        }

        /*  ObjDissolve  <percentage> ¦ (envelope)

            example:     ObjDissolve 0.500000

            The ObjDissolve function determines the object's
            dissolve level during the rendering process. The
            example would produce an object that is 50% dissolved 
            throughout the animation. The value is listed as a
            percentage out to six decimal places. If the value is
            left at the default of 0% dissolved, the function does
            not provide a listing in the scene file. The value of
            this function can be changed over time with an envelope.
            If an envelope is selected, the functions value is
            replaced with an envelope identifier. For more information
            on envelopes, see the Envelopes Section 1.4.

            User Interface:

            The ObjDissolve function is set from the Objects Panel.
        */
        void ObjectDissolve()
        {
            currentObject.Dissolve.Value = file.read_double();
            currentFloatEnvelope = currentObject.Dissolve;
        }

        void SubdivisionOrder()
        {
            currentObject.SubdivisionOrder = file.read_int();
        }

        void SubPatchLevel()
        {
            currentObject.SubPatchLevel[0] = file.read_int();
            currentObject.SubPatchLevel[1] = file.read_int();
        }

        /*  ShadowOptions <bit-field value>

            example:     ShadowOptions 7

            The ShadowOptions function provides the shadowing
            characteristics for the current object.

            The bit-field value is produced by calculating the
            decimal value of a 3 position bit-field whose bits
            represent logical on/off switches that are number
            left to right from 0 to 2. The least-significant bit
            for this field is the rightmost bit. Each shadow option
            has a corresponding bit in the bit-field. When a
            shadow option is turned on, its bit (or switch) 
            is turned on.

            <bit position>:
                0 - Self Shadow
                1 - Cast Shadow
                2 - Receive Shadow 

            The ShadowOptions function produces a listing for all objects.

            User Interface:

            The shadow options function is set from 
            the bottom of the Objects Panel.
        */
        void ShadowOptions()
        {
            currentObject.ShadowOptions = file.read_int();
        }

        /*  DistanceDissolve <flag>

            example:     DistanceDissolve 1

            The DistanceDissolve flag turns the distance dissolve
            function on and off. This function produces a
            DistanceDissolve listing with a value of 1 and 
            adds the MaxDissolveDistance listing (see below)
            when turned on. When turned off, this function does
            not provide a listing in the scene file.

            <flag>:
                0 - Off (No Listing)
                1 - On  (Function listing plus additional MaxDissolveDistance listing)
        */
        void DistanceDissolve()
        {
            currentObject.DistanceDissolve = file.read_int();
        }

        /*  Additional:     MaxDissolveDistance <distance>

            example:     MaxDissolveDistance 25.000000

            The MaxDissolveDistance function provides the distance
            from the camera that the object will be %100 dissolved.
            In the example shown, the object will be completely
            dissolved at 25 meters.

            User Interface:

            The DistanceDissolve functions are set from the 
            Objects Panel.
        */
        void MaxDissolveDistance()
        {
            currentObject.MaxDissolveDistance = file.read_double();
        }

        /*  PolygonSize <percentage> ¦ (envelope)

            example:     PolygonSize 0.350000

            The PolygonSize function provides a value that adjusts
            the polygon size of all polygons in the current object.
            The example would produce an object with all polygons
            35% of their original size. If the value is left at the
            default 100%, this function does not provide a listing in 
            the scene file. The value of this function can be changed
            over time with an envelope. If an envelope is selected,
            the functions value is replaced with an envelope identifier.
            For more information on envelopes, see the Envelopes
            Section 1.4. 

            User Interface:

            The PolygonSize function is set from the Objects Panel.
        */
        void PolygonSize()
        {
            currentObject.PolygonSize.Value = file.read_double();
            currentFloatEnvelope = currentObject.PolygonSize;
        }

        /*  Particle/LineSize <value>

            example:  Particle/LineSize 1

            The Particle/LineSize function determines the size
            of a one and two point polygons when rendered.

            If the value is left at the default of Automatic, no
            function listing is produced in the scene file.

            <value>:
                0 - Automatic (No function listing)
                1-  Small
                2 - Medium
                3 - Large

            User Interface:

            The Particle/LineSize function is set from the 
            Particle/Line Size pop-up panel on the Objects Panel.
        */
        void ParticleSize()
        {
            currentObject.ParticleSize = file.read_double();
        }
        void LineSize()
        {
            currentObject.LineSize = file.read_double();
        }

        void UnseenByRays()
        {
            currentObject.UnseenByRays = file.read_int();
        }

        void UnseenByCamera()
        {
            currentObject.UnseenByCamera = file.read_int();
        }

        /*  UnaffectedByFog <flag>

            example:  UnaffectedByFog 1

            The UnaffectedByFog flag activates the Unaffected by
            Fog function that will allow the current object to
            render normally when fog is turned on. This function
            produces a UnaffectedByFog listing with a value of 1
            when turned on. When turned off, this function does
            not produce a listing in the scene file.

            <flag>:
                0 - Off (No function listing)
                1 - On

            User Interface:

            The UnaffectedByFog function is set from the Objects Panel.
        */
        void UnaffectedByFog()
        {
            currentObject.UnaffectedByFog = file.read_int();
        }

        void AffectedByFog()
        {
            currentObject.AffectedByFog = file.read_int();
        }

        void ExcludeLight()
        {
            int light = file.read_int();
            currentObject.Excludelights.Add(light);
        }

        /*  ObjPolygonEdges <flag>

            example:     ObjPolygonEdges 1

            The ObjPolygonEdges flag activates the Polygon Edges
            function that renders all polygons with a visible
            outline. This function produces a ObjPolygonEdges
            listing with a value of 1 and adds an ObjEdgeColor 
            listing (see below) when turned on. When turned off,
            this function does not produce a listing in the scene file.

            <flag>:
                0 - Off (No function listing)
                1 - On  (Function listing plus additional listing)
        */
        void ObjPolygonEdges()
        {
            currentObject.PolygonEdges = file.read_int();
        }

        /*  Additional: ObjEdgeColor <red value> <green value> <blue value>

            example:     ObjEdgeColor 0 0 255

            The ObjEgdeColor function provides the RGB color
            values for the object's polygon edges.

            <color value range>:
                red value   - 0 - 255
                green value - 0 - 255
                blue value  - 0 - 255

            User Interface:

            The ObjPolygonEdges functions are set from the 
            Objects Panel.
        */
        void ObjEdgeColor()
        {
            double red   = file.read_double();
            double green = file.read_double();
            double blue  = file.read_double();
            currentObject.ObjEdgeColor = new Vector3(red, green, blue);
        }

        void PolygonEdgeFlags()
        {
            currentObject.PolygonEdgeFlags = file.read_int();
        }

        void PolygonEdgeThickness()
        {
            currentObject.PolygonEdgeThickness = file.read_double();
        }

        void PolygonEdgesZScale()
        {
            currentObject.PolygonEdgesZScale = file.read_double();
        }

        void EdgeNominalDistance()
        {
            currentObject.PolygonEdgeThickness = file.read_double();
        }

        /*  Metamorph <percentage> ¦ (envelope)

            example:     Metamorph 0.500000

            The Metamorph function provides LightWave with the
            information needed to morph the current object into
            a target object that is provided in the MorphTarget
            function.

            The value is the percentage of change between the
            current object and its target. The function's value
            can be changed over time with an envelope. If an
            envelope is chosen, the functions value is replaced 
            with an envelope identifier. For more information on
            envelopes, see the Envelopes Section 1.4.

            When the Metamorph function is selected, two additional
            function listings are necessary. These are listed below:
        */
        void Metamorph()
        {
            currentObject.Metamorph.Value = file.read_double();
            currentFloatEnvelope = currentObject.Metamorph;
        }

        /*  Additional:     MorphTarget  <object instance>

            example:     MorphTarget 2

            The MorphTarget function provides the morph target's
            object position in the object listing.
        */
        void MorphTarget()
        {
            currentObject.MorphTarget = file.read_int();
        }

        /*  Additional:     MorphSurfaces  <flag>

            example:     MorphSurfaces 1

            The MorphSurfaces flag activates the morphing of
            the surface attributes. 

              <flag>:
                0 - Off
                1 - On

            User Interface:

            The Metamorph functions are set from the Objects Panel.
        */
        void MorphSurfaces()
        {
            currentObject.MorphSurfaces = file.read_int();
        }

    }
}
